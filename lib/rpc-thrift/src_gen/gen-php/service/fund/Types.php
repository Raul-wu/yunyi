<?php
namespace service\fund;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class CreateCashOrderReq {
  static $_TSPEC;

  public $pid = null;
  public $uid = null;
  public $bankcardId = 0;
  public $opType = null;
  public $totalAmtE2 = null;
  public $workDate = "";
  public $clientId = null;
  public $userCouponId = 0;
  public $payAmtE2 = 0;
  public $srcId = 0;
  public $subSrc = "";

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'bankcardId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'opType',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'totalAmtE2',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'workDate',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'clientId',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'userCouponId',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'payAmtE2',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'srcId',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'subSrc',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pid'])) {
        $this->pid = $vals['pid'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['bankcardId'])) {
        $this->bankcardId = $vals['bankcardId'];
      }
      if (isset($vals['opType'])) {
        $this->opType = $vals['opType'];
      }
      if (isset($vals['totalAmtE2'])) {
        $this->totalAmtE2 = $vals['totalAmtE2'];
      }
      if (isset($vals['workDate'])) {
        $this->workDate = $vals['workDate'];
      }
      if (isset($vals['clientId'])) {
        $this->clientId = $vals['clientId'];
      }
      if (isset($vals['userCouponId'])) {
        $this->userCouponId = $vals['userCouponId'];
      }
      if (isset($vals['payAmtE2'])) {
        $this->payAmtE2 = $vals['payAmtE2'];
      }
      if (isset($vals['srcId'])) {
        $this->srcId = $vals['srcId'];
      }
      if (isset($vals['subSrc'])) {
        $this->subSrc = $vals['subSrc'];
      }
    }
  }

  public function getName() {
    return 'CreateCashOrderReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->bankcardId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->opType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->totalAmtE2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->workDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->clientId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userCouponId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->payAmtE2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->srcId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->subSrc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CreateCashOrderReq');
    if ($this->pid !== null) {
      $xfer += $output->writeFieldBegin('pid', TType::I32, 1);
      $xfer += $output->writeI32($this->pid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 2);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bankcardId !== null) {
      $xfer += $output->writeFieldBegin('bankcardId', TType::I32, 3);
      $xfer += $output->writeI32($this->bankcardId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->opType !== null) {
      $xfer += $output->writeFieldBegin('opType', TType::I32, 4);
      $xfer += $output->writeI32($this->opType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalAmtE2 !== null) {
      $xfer += $output->writeFieldBegin('totalAmtE2', TType::I64, 5);
      $xfer += $output->writeI64($this->totalAmtE2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->workDate !== null) {
      $xfer += $output->writeFieldBegin('workDate', TType::STRING, 6);
      $xfer += $output->writeString($this->workDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientId !== null) {
      $xfer += $output->writeFieldBegin('clientId', TType::I32, 7);
      $xfer += $output->writeI32($this->clientId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userCouponId !== null) {
      $xfer += $output->writeFieldBegin('userCouponId', TType::I32, 8);
      $xfer += $output->writeI32($this->userCouponId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payAmtE2 !== null) {
      $xfer += $output->writeFieldBegin('payAmtE2', TType::I64, 9);
      $xfer += $output->writeI64($this->payAmtE2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->srcId !== null) {
      $xfer += $output->writeFieldBegin('srcId', TType::I32, 10);
      $xfer += $output->writeI32($this->srcId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->subSrc !== null) {
      $xfer += $output->writeFieldBegin('subSrc', TType::STRING, 11);
      $xfer += $output->writeString($this->subSrc);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CashOrderByLcsReq {
  static $_TSPEC;

  public $uid = null;
  public $bankcardId = null;
  public $totalAmtE2 = null;
  public $clientId = null;
  public $srcId = 0;
  public $subSrc = "";

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'bankcardId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'totalAmtE2',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'clientId',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'srcId',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'subSrc',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['bankcardId'])) {
        $this->bankcardId = $vals['bankcardId'];
      }
      if (isset($vals['totalAmtE2'])) {
        $this->totalAmtE2 = $vals['totalAmtE2'];
      }
      if (isset($vals['clientId'])) {
        $this->clientId = $vals['clientId'];
      }
      if (isset($vals['srcId'])) {
        $this->srcId = $vals['srcId'];
      }
      if (isset($vals['subSrc'])) {
        $this->subSrc = $vals['subSrc'];
      }
    }
  }

  public function getName() {
    return 'CashOrderByLcsReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->bankcardId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->totalAmtE2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->clientId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->srcId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->subSrc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CashOrderByLcsReq');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 1);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bankcardId !== null) {
      $xfer += $output->writeFieldBegin('bankcardId', TType::I32, 2);
      $xfer += $output->writeI32($this->bankcardId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalAmtE2 !== null) {
      $xfer += $output->writeFieldBegin('totalAmtE2', TType::I64, 3);
      $xfer += $output->writeI64($this->totalAmtE2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientId !== null) {
      $xfer += $output->writeFieldBegin('clientId', TType::I32, 4);
      $xfer += $output->writeI32($this->clientId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->srcId !== null) {
      $xfer += $output->writeFieldBegin('srcId', TType::I32, 5);
      $xfer += $output->writeI32($this->srcId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->subSrc !== null) {
      $xfer += $output->writeFieldBegin('subSrc', TType::STRING, 6);
      $xfer += $output->writeString($this->subSrc);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ImportCashOrderReq {
  static $_TSPEC;

  public $pid = null;
  public $batchId = null;
  public $count = null;
  public $totalAmtE2 = null;
  public $opType = null;
  public $workDate = "";
  public $records = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'batchId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'totalAmtE2',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'opType',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'workDate',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\service\fund\CashOrderByLcsReq',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pid'])) {
        $this->pid = $vals['pid'];
      }
      if (isset($vals['batchId'])) {
        $this->batchId = $vals['batchId'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
      if (isset($vals['totalAmtE2'])) {
        $this->totalAmtE2 = $vals['totalAmtE2'];
      }
      if (isset($vals['opType'])) {
        $this->opType = $vals['opType'];
      }
      if (isset($vals['workDate'])) {
        $this->workDate = $vals['workDate'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
    }
  }

  public function getName() {
    return 'ImportCashOrderReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->batchId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->totalAmtE2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->opType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->workDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \service\fund\CashOrderByLcsReq();
              $xfer += $elem5->read($input);
              $this->records []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ImportCashOrderReq');
    if ($this->pid !== null) {
      $xfer += $output->writeFieldBegin('pid', TType::I32, 1);
      $xfer += $output->writeI32($this->pid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batchId !== null) {
      $xfer += $output->writeFieldBegin('batchId', TType::STRING, 2);
      $xfer += $output->writeString($this->batchId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 3);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalAmtE2 !== null) {
      $xfer += $output->writeFieldBegin('totalAmtE2', TType::I64, 4);
      $xfer += $output->writeI64($this->totalAmtE2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->opType !== null) {
      $xfer += $output->writeFieldBegin('opType', TType::I32, 5);
      $xfer += $output->writeI32($this->opType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->workDate !== null) {
      $xfer += $output->writeFieldBegin('workDate', TType::STRING, 6);
      $xfer += $output->writeString($this->workDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 7);
      {
        $output->writeListBegin(TType::STRUCT, count($this->records));
        {
          foreach ($this->records as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ImportCashOrderResp {
  static $_TSPEC;

  public $pid = null;
  public $count = null;
  public $totalAmtE2 = null;
  public $workDate = "";
  public $execCode = null;
  public $execMsg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'totalAmtE2',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'workDate',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'execCode',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'execMsg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pid'])) {
        $this->pid = $vals['pid'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
      if (isset($vals['totalAmtE2'])) {
        $this->totalAmtE2 = $vals['totalAmtE2'];
      }
      if (isset($vals['workDate'])) {
        $this->workDate = $vals['workDate'];
      }
      if (isset($vals['execCode'])) {
        $this->execCode = $vals['execCode'];
      }
      if (isset($vals['execMsg'])) {
        $this->execMsg = $vals['execMsg'];
      }
    }
  }

  public function getName() {
    return 'ImportCashOrderResp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->totalAmtE2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->workDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->execCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->execMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ImportCashOrderResp');
    if ($this->pid !== null) {
      $xfer += $output->writeFieldBegin('pid', TType::I32, 1);
      $xfer += $output->writeI32($this->pid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 2);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalAmtE2 !== null) {
      $xfer += $output->writeFieldBegin('totalAmtE2', TType::I64, 3);
      $xfer += $output->writeI64($this->totalAmtE2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->workDate !== null) {
      $xfer += $output->writeFieldBegin('workDate', TType::STRING, 5);
      $xfer += $output->writeString($this->workDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->execCode !== null) {
      $xfer += $output->writeFieldBegin('execCode', TType::I32, 6);
      $xfer += $output->writeI32($this->execCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->execMsg !== null) {
      $xfer += $output->writeFieldBegin('execMsg', TType::STRING, 7);
      $xfer += $output->writeString($this->execMsg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PrePayReq {
  static $_TSPEC;

  public $serialNo = null;
  public $uid = null;
  public $totalAmtE2 = null;
  public $bankcardId = null;
  public $userCouponId = 0;
  public $payAmtE2 = 0;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'serialNo',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'totalAmtE2',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'bankcardId',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'userCouponId',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'payAmtE2',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['serialNo'])) {
        $this->serialNo = $vals['serialNo'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['totalAmtE2'])) {
        $this->totalAmtE2 = $vals['totalAmtE2'];
      }
      if (isset($vals['bankcardId'])) {
        $this->bankcardId = $vals['bankcardId'];
      }
      if (isset($vals['userCouponId'])) {
        $this->userCouponId = $vals['userCouponId'];
      }
      if (isset($vals['payAmtE2'])) {
        $this->payAmtE2 = $vals['payAmtE2'];
      }
    }
  }

  public function getName() {
    return 'PrePayReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->serialNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->totalAmtE2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->bankcardId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userCouponId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->payAmtE2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PrePayReq');
    if ($this->serialNo !== null) {
      $xfer += $output->writeFieldBegin('serialNo', TType::STRING, 1);
      $xfer += $output->writeString($this->serialNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 2);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalAmtE2 !== null) {
      $xfer += $output->writeFieldBegin('totalAmtE2', TType::I64, 3);
      $xfer += $output->writeI64($this->totalAmtE2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bankcardId !== null) {
      $xfer += $output->writeFieldBegin('bankcardId', TType::I32, 5);
      $xfer += $output->writeI32($this->bankcardId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userCouponId !== null) {
      $xfer += $output->writeFieldBegin('userCouponId', TType::I32, 7);
      $xfer += $output->writeI32($this->userCouponId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payAmtE2 !== null) {
      $xfer += $output->writeFieldBegin('payAmtE2', TType::I64, 8);
      $xfer += $output->writeI64($this->payAmtE2);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PrePayResp {
  static $_TSPEC;

  public $serialNo = null;
  public $totalAmtE2 = null;
  public $transactionId = null;
  public $execCode = null;
  public $execMsg = null;
  public $payAmtE2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'serialNo',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'totalAmtE2',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'transactionId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'execCode',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'execMsg',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'payAmtE2',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['serialNo'])) {
        $this->serialNo = $vals['serialNo'];
      }
      if (isset($vals['totalAmtE2'])) {
        $this->totalAmtE2 = $vals['totalAmtE2'];
      }
      if (isset($vals['transactionId'])) {
        $this->transactionId = $vals['transactionId'];
      }
      if (isset($vals['execCode'])) {
        $this->execCode = $vals['execCode'];
      }
      if (isset($vals['execMsg'])) {
        $this->execMsg = $vals['execMsg'];
      }
      if (isset($vals['payAmtE2'])) {
        $this->payAmtE2 = $vals['payAmtE2'];
      }
    }
  }

  public function getName() {
    return 'PrePayResp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->serialNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->totalAmtE2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->transactionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->execCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->execMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->payAmtE2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PrePayResp');
    if ($this->serialNo !== null) {
      $xfer += $output->writeFieldBegin('serialNo', TType::STRING, 1);
      $xfer += $output->writeString($this->serialNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalAmtE2 !== null) {
      $xfer += $output->writeFieldBegin('totalAmtE2', TType::I64, 2);
      $xfer += $output->writeI64($this->totalAmtE2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transactionId !== null) {
      $xfer += $output->writeFieldBegin('transactionId', TType::STRING, 3);
      $xfer += $output->writeString($this->transactionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->execCode !== null) {
      $xfer += $output->writeFieldBegin('execCode', TType::STRING, 4);
      $xfer += $output->writeString($this->execCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->execMsg !== null) {
      $xfer += $output->writeFieldBegin('execMsg', TType::STRING, 5);
      $xfer += $output->writeString($this->execMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payAmtE2 !== null) {
      $xfer += $output->writeFieldBegin('payAmtE2', TType::I64, 6);
      $xfer += $output->writeI64($this->payAmtE2);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CashOrderPaidReq {
  static $_TSPEC;

  public $serialNo = null;
  public $payAmtE2 = null;
  public $transactionId = null;
  public $payCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'serialNo',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'payAmtE2',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'transactionId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'payCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['serialNo'])) {
        $this->serialNo = $vals['serialNo'];
      }
      if (isset($vals['payAmtE2'])) {
        $this->payAmtE2 = $vals['payAmtE2'];
      }
      if (isset($vals['transactionId'])) {
        $this->transactionId = $vals['transactionId'];
      }
      if (isset($vals['payCode'])) {
        $this->payCode = $vals['payCode'];
      }
    }
  }

  public function getName() {
    return 'CashOrderPaidReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->serialNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->payAmtE2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->transactionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->payCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CashOrderPaidReq');
    if ($this->serialNo !== null) {
      $xfer += $output->writeFieldBegin('serialNo', TType::STRING, 1);
      $xfer += $output->writeString($this->serialNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payAmtE2 !== null) {
      $xfer += $output->writeFieldBegin('payAmtE2', TType::I64, 2);
      $xfer += $output->writeI64($this->payAmtE2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transactionId !== null) {
      $xfer += $output->writeFieldBegin('transactionId', TType::STRING, 3);
      $xfer += $output->writeString($this->transactionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payCode !== null) {
      $xfer += $output->writeFieldBegin('payCode', TType::STRING, 4);
      $xfer += $output->writeString($this->payCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}



final class CashFundServerConstants {
}


