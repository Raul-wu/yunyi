<?php
namespace service\sm;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class ApplyRedeemRequest {
  static $_TSPEC;

  public $openPeriodId = null;
  public $orderId = null;
  public $uid = null;
  public $applyShareE6 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'openPeriodId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'orderId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'applyShareE6',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['openPeriodId'])) {
        $this->openPeriodId = $vals['openPeriodId'];
      }
      if (isset($vals['orderId'])) {
        $this->orderId = $vals['orderId'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['applyShareE6'])) {
        $this->applyShareE6 = $vals['applyShareE6'];
      }
    }
  }

  public function getName() {
    return 'ApplyRedeemRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->openPeriodId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->applyShareE6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ApplyRedeemRequest');
    if ($this->openPeriodId !== null) {
      $xfer += $output->writeFieldBegin('openPeriodId', TType::I32, 1);
      $xfer += $output->writeI32($this->openPeriodId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderId !== null) {
      $xfer += $output->writeFieldBegin('orderId', TType::STRING, 2);
      $xfer += $output->writeString($this->orderId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 3);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applyShareE6 !== null) {
      $xfer += $output->writeFieldBegin('applyShareE6', TType::I64, 4);
      $xfer += $output->writeI64($this->applyShareE6);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CancelApplyRequest {
  static $_TSPEC;

  public $transId = null;
  public $uid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'transId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['transId'])) {
        $this->transId = $vals['transId'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
    }
  }

  public function getName() {
    return 'CancelApplyRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->transId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CancelApplyRequest');
    if ($this->transId !== null) {
      $xfer += $output->writeFieldBegin('transId', TType::STRING, 1);
      $xfer += $output->writeString($this->transId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 2);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ApplyRedeemCallBackRequest {
  static $_TSPEC;

  public $orderId = null;
  public $state = null;
  public $shareE6 = null;
  public $networth = null;
  public $servicefreeE2 = null;
  public $redeemType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'state',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'shareE6',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'networth',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'servicefreeE2',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'redeemType',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['orderId'])) {
        $this->orderId = $vals['orderId'];
      }
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
      if (isset($vals['shareE6'])) {
        $this->shareE6 = $vals['shareE6'];
      }
      if (isset($vals['networth'])) {
        $this->networth = $vals['networth'];
      }
      if (isset($vals['servicefreeE2'])) {
        $this->servicefreeE2 = $vals['servicefreeE2'];
      }
      if (isset($vals['redeemType'])) {
        $this->redeemType = $vals['redeemType'];
      }
    }
  }

  public function getName() {
    return 'ApplyRedeemCallBackRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->shareE6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->networth);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->servicefreeE2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->redeemType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ApplyRedeemCallBackRequest');
    if ($this->orderId !== null) {
      $xfer += $output->writeFieldBegin('orderId', TType::STRING, 1);
      $xfer += $output->writeString($this->orderId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::I32, 2);
      $xfer += $output->writeI32($this->state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shareE6 !== null) {
      $xfer += $output->writeFieldBegin('shareE6', TType::I32, 3);
      $xfer += $output->writeI32($this->shareE6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->networth !== null) {
      $xfer += $output->writeFieldBegin('networth', TType::I32, 4);
      $xfer += $output->writeI32($this->networth);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->servicefreeE2 !== null) {
      $xfer += $output->writeFieldBegin('servicefreeE2', TType::I32, 5);
      $xfer += $output->writeI32($this->servicefreeE2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->redeemType !== null) {
      $xfer += $output->writeFieldBegin('redeemType', TType::I32, 6);
      $xfer += $output->writeI32($this->redeemType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PublishUnit {
  static $_TSPEC;

  public $orderId = null;
  public $principalE2 = null;
  public $shareE6 = null;
  public $servicefreeE2 = null;
  public $subscriptionFeeE2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'principalE2',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'shareE6',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'servicefreeE2',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'subscriptionFeeE2',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['orderId'])) {
        $this->orderId = $vals['orderId'];
      }
      if (isset($vals['principalE2'])) {
        $this->principalE2 = $vals['principalE2'];
      }
      if (isset($vals['shareE6'])) {
        $this->shareE6 = $vals['shareE6'];
      }
      if (isset($vals['servicefreeE2'])) {
        $this->servicefreeE2 = $vals['servicefreeE2'];
      }
      if (isset($vals['subscriptionFeeE2'])) {
        $this->subscriptionFeeE2 = $vals['subscriptionFeeE2'];
      }
    }
  }

  public function getName() {
    return 'PublishUnit';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->principalE2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->shareE6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->servicefreeE2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->subscriptionFeeE2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PublishUnit');
    if ($this->orderId !== null) {
      $xfer += $output->writeFieldBegin('orderId', TType::STRING, 1);
      $xfer += $output->writeString($this->orderId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->principalE2 !== null) {
      $xfer += $output->writeFieldBegin('principalE2', TType::I64, 2);
      $xfer += $output->writeI64($this->principalE2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shareE6 !== null) {
      $xfer += $output->writeFieldBegin('shareE6', TType::I64, 3);
      $xfer += $output->writeI64($this->shareE6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->servicefreeE2 !== null) {
      $xfer += $output->writeFieldBegin('servicefreeE2', TType::I64, 4);
      $xfer += $output->writeI64($this->servicefreeE2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->subscriptionFeeE2 !== null) {
      $xfer += $output->writeFieldBegin('subscriptionFeeE2', TType::I64, 5);
      $xfer += $output->writeI64($this->subscriptionFeeE2);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PublishNetworthRequest {
  static $_TSPEC;

  public $ppid = null;
  public $navE6 = null;
  public $serviceFeeRateE6 = null;
  public $subscriptionFeeRateE6 = null;
  public $publishtime = null;
  public $orders = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ppid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'navE6',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'serviceFeeRateE6',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'subscriptionFeeRateE6',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'publishtime',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'orders',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\service\sm\PublishUnit',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ppid'])) {
        $this->ppid = $vals['ppid'];
      }
      if (isset($vals['navE6'])) {
        $this->navE6 = $vals['navE6'];
      }
      if (isset($vals['serviceFeeRateE6'])) {
        $this->serviceFeeRateE6 = $vals['serviceFeeRateE6'];
      }
      if (isset($vals['subscriptionFeeRateE6'])) {
        $this->subscriptionFeeRateE6 = $vals['subscriptionFeeRateE6'];
      }
      if (isset($vals['publishtime'])) {
        $this->publishtime = $vals['publishtime'];
      }
      if (isset($vals['orders'])) {
        $this->orders = $vals['orders'];
      }
    }
  }

  public function getName() {
    return 'PublishNetworthRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ppid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->navE6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->serviceFeeRateE6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->subscriptionFeeRateE6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->publishtime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->orders = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \service\sm\PublishUnit();
              $xfer += $elem5->read($input);
              $this->orders []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PublishNetworthRequest');
    if ($this->ppid !== null) {
      $xfer += $output->writeFieldBegin('ppid', TType::I32, 1);
      $xfer += $output->writeI32($this->ppid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->navE6 !== null) {
      $xfer += $output->writeFieldBegin('navE6', TType::I64, 2);
      $xfer += $output->writeI64($this->navE6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serviceFeeRateE6 !== null) {
      $xfer += $output->writeFieldBegin('serviceFeeRateE6', TType::I64, 3);
      $xfer += $output->writeI64($this->serviceFeeRateE6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->subscriptionFeeRateE6 !== null) {
      $xfer += $output->writeFieldBegin('subscriptionFeeRateE6', TType::I64, 4);
      $xfer += $output->writeI64($this->subscriptionFeeRateE6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->publishtime !== null) {
      $xfer += $output->writeFieldBegin('publishtime', TType::I64, 5);
      $xfer += $output->writeI64($this->publishtime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orders !== null) {
      if (!is_array($this->orders)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('orders', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRUCT, count($this->orders));
        {
          foreach ($this->orders as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserInfo {
  static $_TSPEC;

  public $order = null;
  public $bankcard = null;
  public $user = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order',
          'type' => TType::STRUCT,
          'class' => '\entity\order\UserOrder',
          ),
        2 => array(
          'var' => 'bankcard',
          'type' => TType::STRUCT,
          'class' => '\entity\user\BankCard',
          ),
        3 => array(
          'var' => 'user',
          'type' => TType::STRUCT,
          'class' => '\entity\user\User',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['order'])) {
        $this->order = $vals['order'];
      }
      if (isset($vals['bankcard'])) {
        $this->bankcard = $vals['bankcard'];
      }
      if (isset($vals['user'])) {
        $this->user = $vals['user'];
      }
    }
  }

  public function getName() {
    return 'UserInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->order = new \entity\order\UserOrder();
            $xfer += $this->order->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->bankcard = new \entity\user\BankCard();
            $xfer += $this->bankcard->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->user = new \entity\user\User();
            $xfer += $this->user->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserInfo');
    if ($this->order !== null) {
      if (!is_object($this->order)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('order', TType::STRUCT, 1);
      $xfer += $this->order->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bankcard !== null) {
      if (!is_object($this->bankcard)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('bankcard', TType::STRUCT, 2);
      $xfer += $this->bankcard->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user !== null) {
      if (!is_object($this->user)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('user', TType::STRUCT, 3);
      $xfer += $this->user->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetApplyRedeemRecordRequest {
  static $_TSPEC;

  public $ppid = null;
  public $reqKey = null;
  public $beginTime = null;
  public $endTime = null;
  public $subPidList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ppid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'reqKey',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'beginTime',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'endTime',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'subPidList',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ppid'])) {
        $this->ppid = $vals['ppid'];
      }
      if (isset($vals['reqKey'])) {
        $this->reqKey = $vals['reqKey'];
      }
      if (isset($vals['beginTime'])) {
        $this->beginTime = $vals['beginTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['subPidList'])) {
        $this->subPidList = $vals['subPidList'];
      }
    }
  }

  public function getName() {
    return 'GetApplyRedeemRecordRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ppid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reqKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->beginTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->subPidList = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $xfer += $input->readI32($elem12);
              $this->subPidList []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetApplyRedeemRecordRequest');
    if ($this->ppid !== null) {
      $xfer += $output->writeFieldBegin('ppid', TType::I32, 1);
      $xfer += $output->writeI32($this->ppid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reqKey !== null) {
      $xfer += $output->writeFieldBegin('reqKey', TType::STRING, 2);
      $xfer += $output->writeString($this->reqKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->beginTime !== null) {
      $xfer += $output->writeFieldBegin('beginTime', TType::I64, 3);
      $xfer += $output->writeI64($this->beginTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::I64, 4);
      $xfer += $output->writeI64($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->subPidList !== null) {
      if (!is_array($this->subPidList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('subPidList', TType::LST, 5);
      {
        $output->writeListBegin(TType::I32, count($this->subPidList));
        {
          foreach ($this->subPidList as $iter13)
          {
            $xfer += $output->writeI32($iter13);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UpdateSmredeemRecordRequest {
  static $_TSPEC;

  public $ppid = null;
  public $orderId = null;
  public $reqkey = null;
  public $redeemType = null;
  public $redeemPrincipalE2 = null;
  public $redeemShareE6 = null;
  public $sharePriceE6 = null;
  public $redeemAmtE2 = null;
  public $totalFeeE2 = null;
  public $repayAmtE2 = null;
  public $redeemTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ppid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'orderId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'reqkey',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'redeemType',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'redeemPrincipalE2',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'redeemShareE6',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'sharePriceE6',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'redeemAmtE2',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'totalFeeE2',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'repayAmtE2',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'redeemTime',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ppid'])) {
        $this->ppid = $vals['ppid'];
      }
      if (isset($vals['orderId'])) {
        $this->orderId = $vals['orderId'];
      }
      if (isset($vals['reqkey'])) {
        $this->reqkey = $vals['reqkey'];
      }
      if (isset($vals['redeemType'])) {
        $this->redeemType = $vals['redeemType'];
      }
      if (isset($vals['redeemPrincipalE2'])) {
        $this->redeemPrincipalE2 = $vals['redeemPrincipalE2'];
      }
      if (isset($vals['redeemShareE6'])) {
        $this->redeemShareE6 = $vals['redeemShareE6'];
      }
      if (isset($vals['sharePriceE6'])) {
        $this->sharePriceE6 = $vals['sharePriceE6'];
      }
      if (isset($vals['redeemAmtE2'])) {
        $this->redeemAmtE2 = $vals['redeemAmtE2'];
      }
      if (isset($vals['totalFeeE2'])) {
        $this->totalFeeE2 = $vals['totalFeeE2'];
      }
      if (isset($vals['repayAmtE2'])) {
        $this->repayAmtE2 = $vals['repayAmtE2'];
      }
      if (isset($vals['redeemTime'])) {
        $this->redeemTime = $vals['redeemTime'];
      }
    }
  }

  public function getName() {
    return 'UpdateSmredeemRecordRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ppid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reqkey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->redeemType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->redeemPrincipalE2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->redeemShareE6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->sharePriceE6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->redeemAmtE2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->totalFeeE2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->repayAmtE2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->redeemTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UpdateSmredeemRecordRequest');
    if ($this->ppid !== null) {
      $xfer += $output->writeFieldBegin('ppid', TType::I32, 1);
      $xfer += $output->writeI32($this->ppid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderId !== null) {
      $xfer += $output->writeFieldBegin('orderId', TType::STRING, 2);
      $xfer += $output->writeString($this->orderId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reqkey !== null) {
      $xfer += $output->writeFieldBegin('reqkey', TType::STRING, 3);
      $xfer += $output->writeString($this->reqkey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->redeemType !== null) {
      $xfer += $output->writeFieldBegin('redeemType', TType::I32, 4);
      $xfer += $output->writeI32($this->redeemType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->redeemPrincipalE2 !== null) {
      $xfer += $output->writeFieldBegin('redeemPrincipalE2', TType::I64, 5);
      $xfer += $output->writeI64($this->redeemPrincipalE2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->redeemShareE6 !== null) {
      $xfer += $output->writeFieldBegin('redeemShareE6', TType::I64, 6);
      $xfer += $output->writeI64($this->redeemShareE6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sharePriceE6 !== null) {
      $xfer += $output->writeFieldBegin('sharePriceE6', TType::I64, 7);
      $xfer += $output->writeI64($this->sharePriceE6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->redeemAmtE2 !== null) {
      $xfer += $output->writeFieldBegin('redeemAmtE2', TType::I64, 8);
      $xfer += $output->writeI64($this->redeemAmtE2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalFeeE2 !== null) {
      $xfer += $output->writeFieldBegin('totalFeeE2', TType::I64, 9);
      $xfer += $output->writeI64($this->totalFeeE2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->repayAmtE2 !== null) {
      $xfer += $output->writeFieldBegin('repayAmtE2', TType::I64, 10);
      $xfer += $output->writeI64($this->repayAmtE2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->redeemTime !== null) {
      $xfer += $output->writeFieldBegin('redeemTime', TType::I64, 11);
      $xfer += $output->writeI64($this->redeemTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UpdateSmRedeemRecordStateRequest {
  static $_TSPEC;

  public $ppid = null;
  public $orderId = null;
  public $reqkey = null;
  public $currentState = null;
  public $updateState = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ppid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'orderId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'reqkey',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'currentState',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'updateState',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ppid'])) {
        $this->ppid = $vals['ppid'];
      }
      if (isset($vals['orderId'])) {
        $this->orderId = $vals['orderId'];
      }
      if (isset($vals['reqkey'])) {
        $this->reqkey = $vals['reqkey'];
      }
      if (isset($vals['currentState'])) {
        $this->currentState = $vals['currentState'];
      }
      if (isset($vals['updateState'])) {
        $this->updateState = $vals['updateState'];
      }
    }
  }

  public function getName() {
    return 'UpdateSmRedeemRecordStateRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ppid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reqkey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->currentState);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->updateState);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UpdateSmRedeemRecordStateRequest');
    if ($this->ppid !== null) {
      $xfer += $output->writeFieldBegin('ppid', TType::I32, 1);
      $xfer += $output->writeI32($this->ppid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderId !== null) {
      $xfer += $output->writeFieldBegin('orderId', TType::STRING, 2);
      $xfer += $output->writeString($this->orderId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reqkey !== null) {
      $xfer += $output->writeFieldBegin('reqkey', TType::STRING, 3);
      $xfer += $output->writeString($this->reqkey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currentState !== null) {
      $xfer += $output->writeFieldBegin('currentState', TType::I32, 4);
      $xfer += $output->writeI32($this->currentState);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updateState !== null) {
      $xfer += $output->writeFieldBegin('updateState', TType::I32, 5);
      $xfer += $output->writeI32($this->updateState);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ApplyDailyRedeemRequest {
  static $_TSPEC;

  public $orderId = null;
  public $openPeriodId = null;
  public $uid = null;
  public $applyShareE6 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'openPeriodId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'applyShareE6',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['orderId'])) {
        $this->orderId = $vals['orderId'];
      }
      if (isset($vals['openPeriodId'])) {
        $this->openPeriodId = $vals['openPeriodId'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['applyShareE6'])) {
        $this->applyShareE6 = $vals['applyShareE6'];
      }
    }
  }

  public function getName() {
    return 'ApplyDailyRedeemRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->openPeriodId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->applyShareE6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ApplyDailyRedeemRequest');
    if ($this->orderId !== null) {
      $xfer += $output->writeFieldBegin('orderId', TType::STRING, 1);
      $xfer += $output->writeString($this->orderId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->openPeriodId !== null) {
      $xfer += $output->writeFieldBegin('openPeriodId', TType::I32, 2);
      $xfer += $output->writeI32($this->openPeriodId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 3);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applyShareE6 !== null) {
      $xfer += $output->writeFieldBegin('applyShareE6', TType::I64, 4);
      $xfer += $output->writeI64($this->applyShareE6);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CancelDailyRedeemRequest {
  static $_TSPEC;

  public $transId = null;
  public $uid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'transId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['transId'])) {
        $this->transId = $vals['transId'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
    }
  }

  public function getName() {
    return 'CancelDailyRedeemRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->transId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CancelDailyRedeemRequest');
    if ($this->transId !== null) {
      $xfer += $output->writeFieldBegin('transId', TType::STRING, 1);
      $xfer += $output->writeString($this->transId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 2);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PreBatchDailyRedeemRequest {
  static $_TSPEC;

  public $openPeriodId = null;
  public $ppid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'openPeriodId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'ppid',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['openPeriodId'])) {
        $this->openPeriodId = $vals['openPeriodId'];
      }
      if (isset($vals['ppid'])) {
        $this->ppid = $vals['ppid'];
      }
    }
  }

  public function getName() {
    return 'PreBatchDailyRedeemRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->openPeriodId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ppid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PreBatchDailyRedeemRequest');
    if ($this->openPeriodId !== null) {
      $xfer += $output->writeFieldBegin('openPeriodId', TType::I32, 1);
      $xfer += $output->writeI32($this->openPeriodId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ppid !== null) {
      $xfer += $output->writeFieldBegin('ppid', TType::I32, 2);
      $xfer += $output->writeI32($this->ppid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ListPreBatchDailyRedeemRequest {
  static $_TSPEC;

  public $listRequest = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'listRequest',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\service\sm\PreBatchDailyRedeemRequest',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['listRequest'])) {
        $this->listRequest = $vals['listRequest'];
      }
    }
  }

  public function getName() {
    return 'ListPreBatchDailyRedeemRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->listRequest = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new \service\sm\PreBatchDailyRedeemRequest();
              $xfer += $elem19->read($input);
              $this->listRequest []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ListPreBatchDailyRedeemRequest');
    if ($this->listRequest !== null) {
      if (!is_array($this->listRequest)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('listRequest', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->listRequest));
        {
          foreach ($this->listRequest as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PreBatchDailyRedeemResponse {
  static $_TSPEC;

  public $openPeriodId = null;
  public $ppid = null;
  public $batchPeriodBeginTime = null;
  public $batchPeriodEndTime = null;
  public $createTime = null;
  public $batchShareE6 = null;
  public $totalShareE6 = null;
  public $transIds = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'openPeriodId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'ppid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'batchPeriodBeginTime',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'batchPeriodEndTime',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'createTime',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'batchShareE6',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'totalShareE6',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'transIds',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['openPeriodId'])) {
        $this->openPeriodId = $vals['openPeriodId'];
      }
      if (isset($vals['ppid'])) {
        $this->ppid = $vals['ppid'];
      }
      if (isset($vals['batchPeriodBeginTime'])) {
        $this->batchPeriodBeginTime = $vals['batchPeriodBeginTime'];
      }
      if (isset($vals['batchPeriodEndTime'])) {
        $this->batchPeriodEndTime = $vals['batchPeriodEndTime'];
      }
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
      if (isset($vals['batchShareE6'])) {
        $this->batchShareE6 = $vals['batchShareE6'];
      }
      if (isset($vals['totalShareE6'])) {
        $this->totalShareE6 = $vals['totalShareE6'];
      }
      if (isset($vals['transIds'])) {
        $this->transIds = $vals['transIds'];
      }
    }
  }

  public function getName() {
    return 'PreBatchDailyRedeemResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->openPeriodId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ppid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->batchPeriodBeginTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->batchPeriodEndTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->createTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->batchShareE6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->totalShareE6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::LST) {
            $this->transIds = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $xfer += $input->readString($elem26);
              $this->transIds []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PreBatchDailyRedeemResponse');
    if ($this->openPeriodId !== null) {
      $xfer += $output->writeFieldBegin('openPeriodId', TType::I32, 1);
      $xfer += $output->writeI32($this->openPeriodId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ppid !== null) {
      $xfer += $output->writeFieldBegin('ppid', TType::I32, 2);
      $xfer += $output->writeI32($this->ppid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batchPeriodBeginTime !== null) {
      $xfer += $output->writeFieldBegin('batchPeriodBeginTime', TType::I32, 3);
      $xfer += $output->writeI32($this->batchPeriodBeginTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batchPeriodEndTime !== null) {
      $xfer += $output->writeFieldBegin('batchPeriodEndTime', TType::I32, 4);
      $xfer += $output->writeI32($this->batchPeriodEndTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTime !== null) {
      $xfer += $output->writeFieldBegin('createTime', TType::I32, 5);
      $xfer += $output->writeI32($this->createTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batchShareE6 !== null) {
      $xfer += $output->writeFieldBegin('batchShareE6', TType::I64, 6);
      $xfer += $output->writeI64($this->batchShareE6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalShareE6 !== null) {
      $xfer += $output->writeFieldBegin('totalShareE6', TType::I64, 7);
      $xfer += $output->writeI64($this->totalShareE6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transIds !== null) {
      if (!is_array($this->transIds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transIds', TType::LST, 8);
      {
        $output->writeListBegin(TType::STRING, count($this->transIds));
        {
          foreach ($this->transIds as $iter27)
          {
            $xfer += $output->writeString($iter27);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ListPreBatchDailyRedeemResponse {
  static $_TSPEC;

  public $listResponse = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'listResponse',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\service\sm\PreBatchDailyRedeemResponse',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['listResponse'])) {
        $this->listResponse = $vals['listResponse'];
      }
    }
  }

  public function getName() {
    return 'ListPreBatchDailyRedeemResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->listResponse = array();
            $_size28 = 0;
            $_etype31 = 0;
            $xfer += $input->readListBegin($_etype31, $_size28);
            for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
            {
              $elem33 = null;
              $elem33 = new \service\sm\PreBatchDailyRedeemResponse();
              $xfer += $elem33->read($input);
              $this->listResponse []= $elem33;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ListPreBatchDailyRedeemResponse');
    if ($this->listResponse !== null) {
      if (!is_array($this->listResponse)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('listResponse', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->listResponse));
        {
          foreach ($this->listResponse as $iter34)
          {
            $xfer += $iter34->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConfirmBatchDailyRedeemRequest {
  static $_TSPEC;

  public $openPeriodId = null;
  public $ppid = null;
  public $batchPeriodBeginTime = null;
  public $batchPeriodEndTime = null;
  public $createTime = null;
  public $batchShareE6 = null;
  public $totalShareE6 = null;
  public $sharePriceE6BaseTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'openPeriodId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'ppid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'batchPeriodBeginTime',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'batchPeriodEndTime',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'createTime',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'batchShareE6',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'totalShareE6',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'sharePriceE6BaseTime',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['openPeriodId'])) {
        $this->openPeriodId = $vals['openPeriodId'];
      }
      if (isset($vals['ppid'])) {
        $this->ppid = $vals['ppid'];
      }
      if (isset($vals['batchPeriodBeginTime'])) {
        $this->batchPeriodBeginTime = $vals['batchPeriodBeginTime'];
      }
      if (isset($vals['batchPeriodEndTime'])) {
        $this->batchPeriodEndTime = $vals['batchPeriodEndTime'];
      }
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
      if (isset($vals['batchShareE6'])) {
        $this->batchShareE6 = $vals['batchShareE6'];
      }
      if (isset($vals['totalShareE6'])) {
        $this->totalShareE6 = $vals['totalShareE6'];
      }
      if (isset($vals['sharePriceE6BaseTime'])) {
        $this->sharePriceE6BaseTime = $vals['sharePriceE6BaseTime'];
      }
    }
  }

  public function getName() {
    return 'ConfirmBatchDailyRedeemRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->openPeriodId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ppid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->batchPeriodBeginTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->batchPeriodEndTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->createTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->batchShareE6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->totalShareE6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sharePriceE6BaseTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConfirmBatchDailyRedeemRequest');
    if ($this->openPeriodId !== null) {
      $xfer += $output->writeFieldBegin('openPeriodId', TType::I32, 1);
      $xfer += $output->writeI32($this->openPeriodId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ppid !== null) {
      $xfer += $output->writeFieldBegin('ppid', TType::I32, 2);
      $xfer += $output->writeI32($this->ppid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batchPeriodBeginTime !== null) {
      $xfer += $output->writeFieldBegin('batchPeriodBeginTime', TType::I32, 3);
      $xfer += $output->writeI32($this->batchPeriodBeginTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batchPeriodEndTime !== null) {
      $xfer += $output->writeFieldBegin('batchPeriodEndTime', TType::I32, 4);
      $xfer += $output->writeI32($this->batchPeriodEndTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTime !== null) {
      $xfer += $output->writeFieldBegin('createTime', TType::I32, 5);
      $xfer += $output->writeI32($this->createTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batchShareE6 !== null) {
      $xfer += $output->writeFieldBegin('batchShareE6', TType::I64, 6);
      $xfer += $output->writeI64($this->batchShareE6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalShareE6 !== null) {
      $xfer += $output->writeFieldBegin('totalShareE6', TType::I64, 7);
      $xfer += $output->writeI64($this->totalShareE6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sharePriceE6BaseTime !== null) {
      $xfer += $output->writeFieldBegin('sharePriceE6BaseTime', TType::I32, 8);
      $xfer += $output->writeI32($this->sharePriceE6BaseTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConfirmBatchDailyRedeemResponse {
  static $_TSPEC;

  public $recordId = null;
  public $openPeriodId = null;
  public $ppid = null;
  public $batchPeriodBeginTime = null;
  public $batchPeriodEndTime = null;
  public $batchShareE6 = null;
  public $batchCountE6 = null;
  public $totalShareE6 = null;
  public $sharePriceE6BaseTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'recordId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'openPeriodId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'ppid',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'batchPeriodBeginTime',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'batchPeriodEndTime',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'batchShareE6',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'batchCountE6',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'totalShareE6',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'sharePriceE6BaseTime',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['recordId'])) {
        $this->recordId = $vals['recordId'];
      }
      if (isset($vals['openPeriodId'])) {
        $this->openPeriodId = $vals['openPeriodId'];
      }
      if (isset($vals['ppid'])) {
        $this->ppid = $vals['ppid'];
      }
      if (isset($vals['batchPeriodBeginTime'])) {
        $this->batchPeriodBeginTime = $vals['batchPeriodBeginTime'];
      }
      if (isset($vals['batchPeriodEndTime'])) {
        $this->batchPeriodEndTime = $vals['batchPeriodEndTime'];
      }
      if (isset($vals['batchShareE6'])) {
        $this->batchShareE6 = $vals['batchShareE6'];
      }
      if (isset($vals['batchCountE6'])) {
        $this->batchCountE6 = $vals['batchCountE6'];
      }
      if (isset($vals['totalShareE6'])) {
        $this->totalShareE6 = $vals['totalShareE6'];
      }
      if (isset($vals['sharePriceE6BaseTime'])) {
        $this->sharePriceE6BaseTime = $vals['sharePriceE6BaseTime'];
      }
    }
  }

  public function getName() {
    return 'ConfirmBatchDailyRedeemResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->recordId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->openPeriodId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ppid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->batchPeriodBeginTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->batchPeriodEndTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->batchShareE6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->batchCountE6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->totalShareE6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sharePriceE6BaseTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConfirmBatchDailyRedeemResponse');
    if ($this->recordId !== null) {
      $xfer += $output->writeFieldBegin('recordId', TType::I64, 1);
      $xfer += $output->writeI64($this->recordId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->openPeriodId !== null) {
      $xfer += $output->writeFieldBegin('openPeriodId', TType::I32, 2);
      $xfer += $output->writeI32($this->openPeriodId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ppid !== null) {
      $xfer += $output->writeFieldBegin('ppid', TType::I32, 3);
      $xfer += $output->writeI32($this->ppid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batchPeriodBeginTime !== null) {
      $xfer += $output->writeFieldBegin('batchPeriodBeginTime', TType::I32, 4);
      $xfer += $output->writeI32($this->batchPeriodBeginTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batchPeriodEndTime !== null) {
      $xfer += $output->writeFieldBegin('batchPeriodEndTime', TType::I32, 5);
      $xfer += $output->writeI32($this->batchPeriodEndTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batchShareE6 !== null) {
      $xfer += $output->writeFieldBegin('batchShareE6', TType::I64, 6);
      $xfer += $output->writeI64($this->batchShareE6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batchCountE6 !== null) {
      $xfer += $output->writeFieldBegin('batchCountE6', TType::I64, 7);
      $xfer += $output->writeI64($this->batchCountE6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalShareE6 !== null) {
      $xfer += $output->writeFieldBegin('totalShareE6', TType::I64, 8);
      $xfer += $output->writeI64($this->totalShareE6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sharePriceE6BaseTime !== null) {
      $xfer += $output->writeFieldBegin('sharePriceE6BaseTime', TType::I32, 9);
      $xfer += $output->writeI32($this->sharePriceE6BaseTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TrySettleDailyRedeemRequest {
  static $_TSPEC;

  public $batchId = null;
  public $openPeriodId = null;
  public $ppid = null;
  public $sharePriceE6 = null;
  public $totalRepayAmtE2 = null;
  public $feeRateE6 = null;
  public $existPerformanceReward = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'batchId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'openPeriodId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'ppid',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'sharePriceE6',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'totalRepayAmtE2',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'feeRateE6',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'existPerformanceReward',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['batchId'])) {
        $this->batchId = $vals['batchId'];
      }
      if (isset($vals['openPeriodId'])) {
        $this->openPeriodId = $vals['openPeriodId'];
      }
      if (isset($vals['ppid'])) {
        $this->ppid = $vals['ppid'];
      }
      if (isset($vals['sharePriceE6'])) {
        $this->sharePriceE6 = $vals['sharePriceE6'];
      }
      if (isset($vals['totalRepayAmtE2'])) {
        $this->totalRepayAmtE2 = $vals['totalRepayAmtE2'];
      }
      if (isset($vals['feeRateE6'])) {
        $this->feeRateE6 = $vals['feeRateE6'];
      }
      if (isset($vals['existPerformanceReward'])) {
        $this->existPerformanceReward = $vals['existPerformanceReward'];
      }
    }
  }

  public function getName() {
    return 'TrySettleDailyRedeemRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->batchId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->openPeriodId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ppid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->sharePriceE6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->totalRepayAmtE2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->feeRateE6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->existPerformanceReward);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TrySettleDailyRedeemRequest');
    if ($this->batchId !== null) {
      $xfer += $output->writeFieldBegin('batchId', TType::I64, 1);
      $xfer += $output->writeI64($this->batchId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->openPeriodId !== null) {
      $xfer += $output->writeFieldBegin('openPeriodId', TType::I32, 2);
      $xfer += $output->writeI32($this->openPeriodId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ppid !== null) {
      $xfer += $output->writeFieldBegin('ppid', TType::I32, 3);
      $xfer += $output->writeI32($this->ppid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sharePriceE6 !== null) {
      $xfer += $output->writeFieldBegin('sharePriceE6', TType::I64, 4);
      $xfer += $output->writeI64($this->sharePriceE6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalRepayAmtE2 !== null) {
      $xfer += $output->writeFieldBegin('totalRepayAmtE2', TType::I64, 5);
      $xfer += $output->writeI64($this->totalRepayAmtE2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->feeRateE6 !== null) {
      $xfer += $output->writeFieldBegin('feeRateE6', TType::I64, 6);
      $xfer += $output->writeI64($this->feeRateE6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->existPerformanceReward !== null) {
      $xfer += $output->writeFieldBegin('existPerformanceReward', TType::BOOL, 7);
      $xfer += $output->writeBool($this->existPerformanceReward);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TrySettleDailyRedeemResponse {
  static $_TSPEC;

  public $batchId = null;
  public $openPeriodId = null;
  public $ppid = null;
  public $totalRedeemAmtE2 = null;
  public $totalRepayAmtE2 = null;
  public $actualTotalRepayAmtE2 = null;
  public $batchShareE6 = null;
  public $feeE2 = null;
  public $performanceRewardE2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'batchId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'openPeriodId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'ppid',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'totalRedeemAmtE2',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'totalRepayAmtE2',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'actualTotalRepayAmtE2',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'batchShareE6',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'feeE2',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'performanceRewardE2',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['batchId'])) {
        $this->batchId = $vals['batchId'];
      }
      if (isset($vals['openPeriodId'])) {
        $this->openPeriodId = $vals['openPeriodId'];
      }
      if (isset($vals['ppid'])) {
        $this->ppid = $vals['ppid'];
      }
      if (isset($vals['totalRedeemAmtE2'])) {
        $this->totalRedeemAmtE2 = $vals['totalRedeemAmtE2'];
      }
      if (isset($vals['totalRepayAmtE2'])) {
        $this->totalRepayAmtE2 = $vals['totalRepayAmtE2'];
      }
      if (isset($vals['actualTotalRepayAmtE2'])) {
        $this->actualTotalRepayAmtE2 = $vals['actualTotalRepayAmtE2'];
      }
      if (isset($vals['batchShareE6'])) {
        $this->batchShareE6 = $vals['batchShareE6'];
      }
      if (isset($vals['feeE2'])) {
        $this->feeE2 = $vals['feeE2'];
      }
      if (isset($vals['performanceRewardE2'])) {
        $this->performanceRewardE2 = $vals['performanceRewardE2'];
      }
    }
  }

  public function getName() {
    return 'TrySettleDailyRedeemResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->batchId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->openPeriodId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ppid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->totalRedeemAmtE2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->totalRepayAmtE2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->actualTotalRepayAmtE2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->batchShareE6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->feeE2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->performanceRewardE2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TrySettleDailyRedeemResponse');
    if ($this->batchId !== null) {
      $xfer += $output->writeFieldBegin('batchId', TType::I64, 1);
      $xfer += $output->writeI64($this->batchId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->openPeriodId !== null) {
      $xfer += $output->writeFieldBegin('openPeriodId', TType::I32, 2);
      $xfer += $output->writeI32($this->openPeriodId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ppid !== null) {
      $xfer += $output->writeFieldBegin('ppid', TType::I32, 3);
      $xfer += $output->writeI32($this->ppid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalRedeemAmtE2 !== null) {
      $xfer += $output->writeFieldBegin('totalRedeemAmtE2', TType::I64, 4);
      $xfer += $output->writeI64($this->totalRedeemAmtE2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalRepayAmtE2 !== null) {
      $xfer += $output->writeFieldBegin('totalRepayAmtE2', TType::I64, 5);
      $xfer += $output->writeI64($this->totalRepayAmtE2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->actualTotalRepayAmtE2 !== null) {
      $xfer += $output->writeFieldBegin('actualTotalRepayAmtE2', TType::I64, 6);
      $xfer += $output->writeI64($this->actualTotalRepayAmtE2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batchShareE6 !== null) {
      $xfer += $output->writeFieldBegin('batchShareE6', TType::I64, 7);
      $xfer += $output->writeI64($this->batchShareE6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->feeE2 !== null) {
      $xfer += $output->writeFieldBegin('feeE2', TType::I64, 8);
      $xfer += $output->writeI64($this->feeE2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->performanceRewardE2 !== null) {
      $xfer += $output->writeFieldBegin('performanceRewardE2', TType::I64, 9);
      $xfer += $output->writeI64($this->performanceRewardE2);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConfirmSettleDailyRedeemRequest {
  static $_TSPEC;

  public $batchId = null;
  public $openPeriodId = null;
  public $ppid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'batchId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'openPeriodId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'ppid',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['batchId'])) {
        $this->batchId = $vals['batchId'];
      }
      if (isset($vals['openPeriodId'])) {
        $this->openPeriodId = $vals['openPeriodId'];
      }
      if (isset($vals['ppid'])) {
        $this->ppid = $vals['ppid'];
      }
    }
  }

  public function getName() {
    return 'ConfirmSettleDailyRedeemRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->batchId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->openPeriodId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ppid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConfirmSettleDailyRedeemRequest');
    if ($this->batchId !== null) {
      $xfer += $output->writeFieldBegin('batchId', TType::I64, 1);
      $xfer += $output->writeI64($this->batchId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->openPeriodId !== null) {
      $xfer += $output->writeFieldBegin('openPeriodId', TType::I32, 2);
      $xfer += $output->writeI32($this->openPeriodId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ppid !== null) {
      $xfer += $output->writeFieldBegin('ppid', TType::I32, 3);
      $xfer += $output->writeI32($this->ppid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}



final class SmServerConstants {
}


