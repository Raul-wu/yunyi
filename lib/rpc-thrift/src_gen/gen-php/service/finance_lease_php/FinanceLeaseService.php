<?php
namespace service\finance_lease_php;
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface FinanceLeaseServiceIf {
  /**
   * 生成还款计划表
   * @param creditNo 合同编号
   * @param date 起租日
   * 
   * @param string $creditNo
   * @param int $date
   * @return string
   */
  public function generateLoanPlan($creditNo, $date);
  /**
   * 预览还款计划表接口
   * @param periodType 1:月，2:日
   * @channel 渠道
   * @param rule 1. 30/360 2. 31/365
   * @param payMethod 1. 等额平息   2. 等额本金       3. 等本等息
   * @param totalAmount 贷款总额
   * @param startDate 起息日（测试接口默认为当天）
   * @param ratio 利率
   * @param timeLimit 期次
   * @param sepicalDay 固定日期（非固定日传0
   * @param factorage 服务费
   * @param margin 保证金
   * @return
   * 
   * @param int $rule
   * @param int $payMethod
   * @param double $totalAmount
   * @param double $ratio
   * @param int $timeLimit
   * @param int $sepicalDay
   * @param int $periodType
   * @param int $channelId
   * @param int $factorage
   * @param int $margin
   * @return string
   */
  public function testLoanPlan($rule, $payMethod, $totalAmount, $ratio, $timeLimit, $sepicalDay, $periodType, $channelId, $factorage, $margin);
  /**
   * 核销费用
   * @param feeId 费用ID
   * @param flowId 流水ID
   * @param factAmount 核销金额
   * @param creatorId 邮箱
   * @param operateType 操作类型(1:核销，2：平账)
   * 
   * @param int $feeId
   * @param int $flowId
   * @param int $factAmount
   * @param string $creatorId
   * @param int $operateType
   * @return string
   */
  public function writeOffLoanFee($feeId, $flowId, $factAmount, $creatorId, $operateType);
  /**
   * 还款计划表核销
   * @param installmentId 还款计划表ID
   * @param flowId 流水ID
   * @param factAmount 核销金额
   * @param creatorId 邮箱
   * @return "1006" 核销成功
   * 
   * @param int $installmentId
   * @param int $flowId
   * @param int $factAmount
   * @param string $creatorId
   * @return string
   */
  public function writeOffInstallment($installmentId, $flowId, $factAmount, $creatorId);
  /**
   * 还款计划表(逾期)核销
   * @param feeId 费用ID
   * @param flowId 流水ID
   * @param factAmount 核销金额
   * @param creatorId 邮箱
   * @param derateAmount 减免金额
   * @param fileUrl 减免附件
   * @return "1006" 核销成功
   * 
   * @param int $installmentId
   * @param int $flowId
   * @param int $factAmount
   * @param string $creatorId
   * @param int $derateAmount
   * @param string $fileUrl
   * @return string
   */
  public function writeOffInstallmentOverdue($installmentId, $flowId, $factAmount, $creatorId, $derateAmount, $fileUrl);
}

class FinanceLeaseServiceClient implements \service\finance_lease_php\FinanceLeaseServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function generateLoanPlan($creditNo, $date)
  {
    $this->send_generateLoanPlan($creditNo, $date);
    return $this->recv_generateLoanPlan();
  }

  public function send_generateLoanPlan($creditNo, $date)
  {
    $args = new \service\finance_lease_php\FinanceLeaseService_generateLoanPlan_args();
    $args->creditNo = $creditNo;
    $args->date = $date;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'generateLoanPlan', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('generateLoanPlan', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_generateLoanPlan()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\service\finance_lease_php\FinanceLeaseService_generateLoanPlan_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \service\finance_lease_php\FinanceLeaseService_generateLoanPlan_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("generateLoanPlan failed: unknown result");
  }

  public function testLoanPlan($rule, $payMethod, $totalAmount, $ratio, $timeLimit, $sepicalDay, $periodType, $channelId, $factorage, $margin)
  {
    $this->send_testLoanPlan($rule, $payMethod, $totalAmount, $ratio, $timeLimit, $sepicalDay, $periodType, $channelId, $factorage, $margin);
    return $this->recv_testLoanPlan();
  }

  public function send_testLoanPlan($rule, $payMethod, $totalAmount, $ratio, $timeLimit, $sepicalDay, $periodType, $channelId, $factorage, $margin)
  {
    $args = new \service\finance_lease_php\FinanceLeaseService_testLoanPlan_args();
    $args->rule = $rule;
    $args->payMethod = $payMethod;
    $args->totalAmount = $totalAmount;
    $args->ratio = $ratio;
    $args->timeLimit = $timeLimit;
    $args->sepicalDay = $sepicalDay;
    $args->periodType = $periodType;
    $args->channelId = $channelId;
    $args->factorage = $factorage;
    $args->margin = $margin;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'testLoanPlan', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('testLoanPlan', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_testLoanPlan()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\service\finance_lease_php\FinanceLeaseService_testLoanPlan_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \service\finance_lease_php\FinanceLeaseService_testLoanPlan_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("testLoanPlan failed: unknown result");
  }

  public function writeOffLoanFee($feeId, $flowId, $factAmount, $creatorId, $operateType)
  {
    $this->send_writeOffLoanFee($feeId, $flowId, $factAmount, $creatorId, $operateType);
    return $this->recv_writeOffLoanFee();
  }

  public function send_writeOffLoanFee($feeId, $flowId, $factAmount, $creatorId, $operateType)
  {
    $args = new \service\finance_lease_php\FinanceLeaseService_writeOffLoanFee_args();
    $args->feeId = $feeId;
    $args->flowId = $flowId;
    $args->factAmount = $factAmount;
    $args->creatorId = $creatorId;
    $args->operateType = $operateType;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'writeOffLoanFee', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('writeOffLoanFee', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_writeOffLoanFee()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\service\finance_lease_php\FinanceLeaseService_writeOffLoanFee_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \service\finance_lease_php\FinanceLeaseService_writeOffLoanFee_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("writeOffLoanFee failed: unknown result");
  }

  public function writeOffInstallment($installmentId, $flowId, $factAmount, $creatorId)
  {
    $this->send_writeOffInstallment($installmentId, $flowId, $factAmount, $creatorId);
    return $this->recv_writeOffInstallment();
  }

  public function send_writeOffInstallment($installmentId, $flowId, $factAmount, $creatorId)
  {
    $args = new \service\finance_lease_php\FinanceLeaseService_writeOffInstallment_args();
    $args->installmentId = $installmentId;
    $args->flowId = $flowId;
    $args->factAmount = $factAmount;
    $args->creatorId = $creatorId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'writeOffInstallment', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('writeOffInstallment', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_writeOffInstallment()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\service\finance_lease_php\FinanceLeaseService_writeOffInstallment_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \service\finance_lease_php\FinanceLeaseService_writeOffInstallment_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("writeOffInstallment failed: unknown result");
  }

  public function writeOffInstallmentOverdue($installmentId, $flowId, $factAmount, $creatorId, $derateAmount, $fileUrl)
  {
    $this->send_writeOffInstallmentOverdue($installmentId, $flowId, $factAmount, $creatorId, $derateAmount, $fileUrl);
    return $this->recv_writeOffInstallmentOverdue();
  }

  public function send_writeOffInstallmentOverdue($installmentId, $flowId, $factAmount, $creatorId, $derateAmount, $fileUrl)
  {
    $args = new \service\finance_lease_php\FinanceLeaseService_writeOffInstallmentOverdue_args();
    $args->installmentId = $installmentId;
    $args->flowId = $flowId;
    $args->factAmount = $factAmount;
    $args->creatorId = $creatorId;
    $args->derateAmount = $derateAmount;
    $args->fileUrl = $fileUrl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'writeOffInstallmentOverdue', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('writeOffInstallmentOverdue', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_writeOffInstallmentOverdue()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\service\finance_lease_php\FinanceLeaseService_writeOffInstallmentOverdue_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \service\finance_lease_php\FinanceLeaseService_writeOffInstallmentOverdue_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("writeOffInstallmentOverdue failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class FinanceLeaseService_generateLoanPlan_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $creditNo = null;
  /**
   * @var int
   */
  public $date = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'creditNo',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'date',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['creditNo'])) {
        $this->creditNo = $vals['creditNo'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
    }
  }

  public function getName() {
    return 'FinanceLeaseService_generateLoanPlan_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->creditNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FinanceLeaseService_generateLoanPlan_args');
    if ($this->creditNo !== null) {
      $xfer += $output->writeFieldBegin('creditNo', TType::STRING, 1);
      $xfer += $output->writeString($this->creditNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::I64, 2);
      $xfer += $output->writeI64($this->date);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FinanceLeaseService_generateLoanPlan_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'FinanceLeaseService_generateLoanPlan_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FinanceLeaseService_generateLoanPlan_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FinanceLeaseService_testLoanPlan_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $rule = null;
  /**
   * @var int
   */
  public $payMethod = null;
  /**
   * @var double
   */
  public $totalAmount = null;
  /**
   * @var double
   */
  public $ratio = null;
  /**
   * @var int
   */
  public $timeLimit = null;
  /**
   * @var int
   */
  public $sepicalDay = null;
  /**
   * @var int
   */
  public $periodType = null;
  /**
   * @var int
   */
  public $channelId = null;
  /**
   * @var int
   */
  public $factorage = null;
  /**
   * @var int
   */
  public $margin = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'rule',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'payMethod',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'totalAmount',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'ratio',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'timeLimit',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'sepicalDay',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'periodType',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'channelId',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'factorage',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'margin',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['rule'])) {
        $this->rule = $vals['rule'];
      }
      if (isset($vals['payMethod'])) {
        $this->payMethod = $vals['payMethod'];
      }
      if (isset($vals['totalAmount'])) {
        $this->totalAmount = $vals['totalAmount'];
      }
      if (isset($vals['ratio'])) {
        $this->ratio = $vals['ratio'];
      }
      if (isset($vals['timeLimit'])) {
        $this->timeLimit = $vals['timeLimit'];
      }
      if (isset($vals['sepicalDay'])) {
        $this->sepicalDay = $vals['sepicalDay'];
      }
      if (isset($vals['periodType'])) {
        $this->periodType = $vals['periodType'];
      }
      if (isset($vals['channelId'])) {
        $this->channelId = $vals['channelId'];
      }
      if (isset($vals['factorage'])) {
        $this->factorage = $vals['factorage'];
      }
      if (isset($vals['margin'])) {
        $this->margin = $vals['margin'];
      }
    }
  }

  public function getName() {
    return 'FinanceLeaseService_testLoanPlan_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rule);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->payMethod);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->totalAmount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->ratio);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->timeLimit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sepicalDay);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->periodType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->channelId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->factorage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->margin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FinanceLeaseService_testLoanPlan_args');
    if ($this->rule !== null) {
      $xfer += $output->writeFieldBegin('rule', TType::I32, 1);
      $xfer += $output->writeI32($this->rule);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payMethod !== null) {
      $xfer += $output->writeFieldBegin('payMethod', TType::I32, 2);
      $xfer += $output->writeI32($this->payMethod);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalAmount !== null) {
      $xfer += $output->writeFieldBegin('totalAmount', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->totalAmount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ratio !== null) {
      $xfer += $output->writeFieldBegin('ratio', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->ratio);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timeLimit !== null) {
      $xfer += $output->writeFieldBegin('timeLimit', TType::I32, 5);
      $xfer += $output->writeI32($this->timeLimit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sepicalDay !== null) {
      $xfer += $output->writeFieldBegin('sepicalDay', TType::I32, 6);
      $xfer += $output->writeI32($this->sepicalDay);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->periodType !== null) {
      $xfer += $output->writeFieldBegin('periodType', TType::I32, 7);
      $xfer += $output->writeI32($this->periodType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channelId !== null) {
      $xfer += $output->writeFieldBegin('channelId', TType::I32, 8);
      $xfer += $output->writeI32($this->channelId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->factorage !== null) {
      $xfer += $output->writeFieldBegin('factorage', TType::I32, 9);
      $xfer += $output->writeI32($this->factorage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->margin !== null) {
      $xfer += $output->writeFieldBegin('margin', TType::I32, 10);
      $xfer += $output->writeI32($this->margin);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FinanceLeaseService_testLoanPlan_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'FinanceLeaseService_testLoanPlan_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FinanceLeaseService_testLoanPlan_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FinanceLeaseService_writeOffLoanFee_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $feeId = null;
  /**
   * @var int
   */
  public $flowId = null;
  /**
   * @var int
   */
  public $factAmount = null;
  /**
   * @var string
   */
  public $creatorId = null;
  /**
   * @var int
   */
  public $operateType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'feeId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'flowId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'factAmount',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'creatorId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'operateType',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['feeId'])) {
        $this->feeId = $vals['feeId'];
      }
      if (isset($vals['flowId'])) {
        $this->flowId = $vals['flowId'];
      }
      if (isset($vals['factAmount'])) {
        $this->factAmount = $vals['factAmount'];
      }
      if (isset($vals['creatorId'])) {
        $this->creatorId = $vals['creatorId'];
      }
      if (isset($vals['operateType'])) {
        $this->operateType = $vals['operateType'];
      }
    }
  }

  public function getName() {
    return 'FinanceLeaseService_writeOffLoanFee_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->feeId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->flowId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->factAmount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->creatorId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->operateType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FinanceLeaseService_writeOffLoanFee_args');
    if ($this->feeId !== null) {
      $xfer += $output->writeFieldBegin('feeId', TType::I32, 1);
      $xfer += $output->writeI32($this->feeId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->flowId !== null) {
      $xfer += $output->writeFieldBegin('flowId', TType::I32, 2);
      $xfer += $output->writeI32($this->flowId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->factAmount !== null) {
      $xfer += $output->writeFieldBegin('factAmount', TType::I32, 3);
      $xfer += $output->writeI32($this->factAmount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creatorId !== null) {
      $xfer += $output->writeFieldBegin('creatorId', TType::STRING, 4);
      $xfer += $output->writeString($this->creatorId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operateType !== null) {
      $xfer += $output->writeFieldBegin('operateType', TType::I32, 5);
      $xfer += $output->writeI32($this->operateType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FinanceLeaseService_writeOffLoanFee_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'FinanceLeaseService_writeOffLoanFee_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FinanceLeaseService_writeOffLoanFee_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FinanceLeaseService_writeOffInstallment_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $installmentId = null;
  /**
   * @var int
   */
  public $flowId = null;
  /**
   * @var int
   */
  public $factAmount = null;
  /**
   * @var string
   */
  public $creatorId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'installmentId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'flowId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'factAmount',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'creatorId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['installmentId'])) {
        $this->installmentId = $vals['installmentId'];
      }
      if (isset($vals['flowId'])) {
        $this->flowId = $vals['flowId'];
      }
      if (isset($vals['factAmount'])) {
        $this->factAmount = $vals['factAmount'];
      }
      if (isset($vals['creatorId'])) {
        $this->creatorId = $vals['creatorId'];
      }
    }
  }

  public function getName() {
    return 'FinanceLeaseService_writeOffInstallment_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->installmentId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->flowId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->factAmount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->creatorId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FinanceLeaseService_writeOffInstallment_args');
    if ($this->installmentId !== null) {
      $xfer += $output->writeFieldBegin('installmentId', TType::I32, 1);
      $xfer += $output->writeI32($this->installmentId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->flowId !== null) {
      $xfer += $output->writeFieldBegin('flowId', TType::I32, 2);
      $xfer += $output->writeI32($this->flowId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->factAmount !== null) {
      $xfer += $output->writeFieldBegin('factAmount', TType::I32, 3);
      $xfer += $output->writeI32($this->factAmount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creatorId !== null) {
      $xfer += $output->writeFieldBegin('creatorId', TType::STRING, 4);
      $xfer += $output->writeString($this->creatorId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FinanceLeaseService_writeOffInstallment_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'FinanceLeaseService_writeOffInstallment_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FinanceLeaseService_writeOffInstallment_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FinanceLeaseService_writeOffInstallmentOverdue_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $installmentId = null;
  /**
   * @var int
   */
  public $flowId = null;
  /**
   * @var int
   */
  public $factAmount = null;
  /**
   * @var string
   */
  public $creatorId = null;
  /**
   * @var int
   */
  public $derateAmount = null;
  /**
   * @var string
   */
  public $fileUrl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'installmentId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'flowId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'factAmount',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'creatorId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'derateAmount',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'fileUrl',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['installmentId'])) {
        $this->installmentId = $vals['installmentId'];
      }
      if (isset($vals['flowId'])) {
        $this->flowId = $vals['flowId'];
      }
      if (isset($vals['factAmount'])) {
        $this->factAmount = $vals['factAmount'];
      }
      if (isset($vals['creatorId'])) {
        $this->creatorId = $vals['creatorId'];
      }
      if (isset($vals['derateAmount'])) {
        $this->derateAmount = $vals['derateAmount'];
      }
      if (isset($vals['fileUrl'])) {
        $this->fileUrl = $vals['fileUrl'];
      }
    }
  }

  public function getName() {
    return 'FinanceLeaseService_writeOffInstallmentOverdue_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->installmentId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->flowId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->factAmount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->creatorId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->derateAmount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fileUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FinanceLeaseService_writeOffInstallmentOverdue_args');
    if ($this->installmentId !== null) {
      $xfer += $output->writeFieldBegin('installmentId', TType::I32, 1);
      $xfer += $output->writeI32($this->installmentId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->flowId !== null) {
      $xfer += $output->writeFieldBegin('flowId', TType::I32, 2);
      $xfer += $output->writeI32($this->flowId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->factAmount !== null) {
      $xfer += $output->writeFieldBegin('factAmount', TType::I32, 3);
      $xfer += $output->writeI32($this->factAmount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creatorId !== null) {
      $xfer += $output->writeFieldBegin('creatorId', TType::STRING, 4);
      $xfer += $output->writeString($this->creatorId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->derateAmount !== null) {
      $xfer += $output->writeFieldBegin('derateAmount', TType::I32, 5);
      $xfer += $output->writeI32($this->derateAmount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fileUrl !== null) {
      $xfer += $output->writeFieldBegin('fileUrl', TType::STRING, 6);
      $xfer += $output->writeString($this->fileUrl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FinanceLeaseService_writeOffInstallmentOverdue_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'FinanceLeaseService_writeOffInstallmentOverdue_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FinanceLeaseService_writeOffInstallmentOverdue_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


