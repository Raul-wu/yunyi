<?php
namespace service\mt;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class NotifyType {
  const BIND_MOBILE_TOKEN = 1001;
  const CHANGE_MOBILE_TOKEN = 1002;
  const FIND_TRANSACTION_PASSWD = 1003;
  const UNBIND_MOBILE = 1004;
  const CHANGE_TRANSACTION_PASSWD = 1005;
  const REGISTER_SEND_PASSWD = 1006;
  const RESET_PASSWD = 1007;
  const REGISTER_MOBILE_TOKEN = 1008;
  const REGISTER_BIND_EMAIL = 1009;
  const FIND_LOGIN_PASSWD = 1010;
  const REGISTER_SUCCESS = 1011;
  const INVITE_EMAIL = 1012;
  const RELATIVES_INVITE_NOTIFY = 1013;
  const COLLEAGUE_INVITE_NOTIFY = 1014;
  const LCS_INVITE_MEMBER = 1015;
  const QUICK_CARD_AUTH = 1016;
  const FRIEND_INVITE = 1017;
  const NEW_PAY_REWARD = 1018;
  const PAY_TOKEN = 2001;
  const ORDER_PAIED = 2002;
  const ORDER_EXPIRE = 2003;
  const ORDER_GROUP_FAILED = 2004;
  const DEPOSIT_TOKEN = 2005;
  const WITHDRAW_TOKEN = 2006;
  const WITHDRAW_FAIL = 2007;
  const INCOME_SETTLED = 2008;
  const INCOME_END = 2009;
  const INCOME_AHEAD_END = 2010;
  const INCOME_AHEAD_STATER = 2011;
  const INCOME_QUARTERLY_PAYMENT = 2012;
  const NOTIFY_PETTY_LOAN = 2013;
  const ROOKIE_INCOME_SETTLED = 2014;
  const ROOKIE_INCOME_END = 2015;
  const TRANSFER_VERIFY = 2016;
  const CALL_MONEY_NOTIFY_PRE = 2017;
  const CALL_MONEY_NOTIFY = 2018;
  const CALL_MONEY_SHARE_CONFIRM = 2019;
  const REDEEM_APPLY_TOKEN = 2020;
  const TRANSFER_SUCCESS_NOTIFY_ASSIGNOR = 2021;
  const TRANSFER_SUCCESS_NOTIFY_ASSIGNEE = 2022;
  const TRANSFER_FAILURE_NOTIFY_ASSIGNEE = 2023;
  const SM_APPOINTMENT_DATE_NOTIFY = 2024;
  const SM_OPEN_DATE_NOTIFY = 2025;
  const SM_APPOINTMENT_CONFIRM = 2026;
  const SM_PUBLISH_NET_VALUE = 2027;
  const SM_RANSOM_CONFIRM = 2028;
  const SM_RANSOM_SETTLED_CONFIRM = 2029;
  const CALL_MONEY_SUCCESS = 2030;
  const TRANSFER_SUCCESS_SETTLED = 2031;
  const SM_DIVIDEND_NOTIFY = 2032;
  const SM_DIVIDEND_SETTLED = 2033;
  const TRANSFER_INCOME_SETTLED = 2034;
  const ORDER_PAIED_INCLUDE_FEE = 2035;
  const INCOME_AHEAD_SETTLED = 2036;
  const TRANSFER_INCOME_AHEAD_SETTLED = 2037;
  const LOAN_APPLY = 2038;
  const LOAN_APPLY_SUCCESS = 2039;
  const LOAN_APPLY_FAIL = 2040;
  const LOAN_PAID = 2041;
  const LOAN_ALERT_BEFORE_7 = 2042;
  const LOAN_ALERT_BEFORE_3 = 2043;
  const LOAN_ALERT_BEFORE_0 = 2044;
  const LOAN_WARNING_AFTER_1 = 2045;
  const LOAN_WARNING_AFTER_10 = 2046;
  const LOAN_WARNING_AFTER_20 = 2047;
  const LOAN_WARNING_AFTER_30 = 2048;
  const LOAN_WARNING_AFTER_31 = 2049;
  const SM_SHARE_CAL_CONFIRM = 2050;
  const SM_PF_CONFIRM = 2051;
  const SM_PUBLISH_NET_VALUE_S = 2052;
  const SM_RANSOM_SETTLED_CONFIRM_S = 2053;
  const LOAD_REPAYMENT_NORMAL = 2054;
  const MOBILE_DONATION_TOKEN = 2055;
  const DONATION_PAY_SUCCESS = 2056;
  const LOAD_DELAY_REPAYMENT_NORMAL = 2057;
  const FUND_PROVE = 2058;
  const LOAN_WARNING_TPL2_AFTER_1 = 2059;
  const LOAN_WARNING_TPL2_AFTER_10 = 2060;
  const LOAN_WARNING_TPL2_AFTER_15 = 2061;
  const LOAN_WARNING_TPL2_AFTER_16 = 2062;
  const LOAN_REPAYMENT_AHEAD = 2063;
  const LOAN_ALTER = 2064;
  const LOAN_ALTER_10 = 2065;
  const LOAN_ALTER_15 = 2066;
  const LOAN_ALTER_16 = 2067;
  const LOAN_HANDLE_ORDER = 2068;
  const LOAN_SETTLE = 2069;
  const LOAN_BANK_LIMIT_7 = 2078;
  const LOAN_BANK_LIMIT_3 = 2079;
  const LOAN_BANK_LIMIT_0 = 2080;
  const LOAN_OFFLINE = 2083;
  const INSURANCE_REDEEM = 2087;
  const LOAN_ADVANCE_NOREPAY = 2088;
  const LOAN_ADVANCE_REPAY = 2089;
  const LOAN_ADVANCE_NORMAL = 2090;
  const LOAN_ADVANCE_OVERDUE = 2091;
  const CASH_SETTLED = 2084;
  const FI_SETTLED_WITH_COUPON = 2085;
  const FI_SETTLED_NO_COUPON = 2086;
  const SM_DIVIDEND_NOTIFY_MORT = 2092;
  const SM_DIVIDEND_SETTLED_MORT = 2093;
  const SM_PUBLISH_NET_VALUE_MORT = 2094;
  const INSURE_SETTLED = 2095;
  const LOAD_REPAYMENT_APPLYING_TOKEN = 2070;
  const AUTO_REGISTER_SUCC = 2071;
  const TEMPLATE_AUTO_REGISTER_SUCC = 2072;
  const EXPERIENCE_INCOME_SETTLED = 2073;
  const SM_REFUND_NOTIY = 2074;
  const SM_REFUND_PAYMENT_NOTIY = 2075;
  const PE_CALL_NOTICE_NOTIY = 2076;
  const PE_CALL_TERMINAL_NOTICE_NOTIY = 2077;
  const CASH_REDEEM_APPLY_TOKEN = 2081;
  const UNBIND_CARD_AUTH = 2082;
  const FUND_SUBSCRIBE_ENTRUST_FAILED = 3001;
  const FUND_REDEEM_ENTRUST_FAILED = 3002;
  const FUND_TRADE_CANCEL = 3003;
  const FUND_MODIFY_DIVIDENDS_TYPE = 3004;
  const PZ_APPLY_PAY_SUCCESS = 4001;
  const CASH_COUPON_EXPERIENCE_SEND = 5001;
  const CASH_COUPON_FOR_PAY_SINGLE_SEND = 5002;
  const CASH_COUPON_FOR_PAY_MULT_SEND = 5003;
  const CASH_COUPON_FOR_FIRST_PAY_SEND = 5004;
  const DEVICE_PUSH = 7001;
  const VOICE_TOKEN = 8001;
  const DIY = 9001;
  const DIY_SMS = 9002;
  const DIY_TMP = 9003;
  static public $__names = array(
    1001 => 'BIND_MOBILE_TOKEN',
    1002 => 'CHANGE_MOBILE_TOKEN',
    1003 => 'FIND_TRANSACTION_PASSWD',
    1004 => 'UNBIND_MOBILE',
    1005 => 'CHANGE_TRANSACTION_PASSWD',
    1006 => 'REGISTER_SEND_PASSWD',
    1007 => 'RESET_PASSWD',
    1008 => 'REGISTER_MOBILE_TOKEN',
    1009 => 'REGISTER_BIND_EMAIL',
    1010 => 'FIND_LOGIN_PASSWD',
    1011 => 'REGISTER_SUCCESS',
    1012 => 'INVITE_EMAIL',
    1013 => 'RELATIVES_INVITE_NOTIFY',
    1014 => 'COLLEAGUE_INVITE_NOTIFY',
    1015 => 'LCS_INVITE_MEMBER',
    1016 => 'QUICK_CARD_AUTH',
    1017 => 'FRIEND_INVITE',
    1018 => 'NEW_PAY_REWARD',
    2001 => 'PAY_TOKEN',
    2002 => 'ORDER_PAIED',
    2003 => 'ORDER_EXPIRE',
    2004 => 'ORDER_GROUP_FAILED',
    2005 => 'DEPOSIT_TOKEN',
    2006 => 'WITHDRAW_TOKEN',
    2007 => 'WITHDRAW_FAIL',
    2008 => 'INCOME_SETTLED',
    2009 => 'INCOME_END',
    2010 => 'INCOME_AHEAD_END',
    2011 => 'INCOME_AHEAD_STATER',
    2012 => 'INCOME_QUARTERLY_PAYMENT',
    2013 => 'NOTIFY_PETTY_LOAN',
    2014 => 'ROOKIE_INCOME_SETTLED',
    2015 => 'ROOKIE_INCOME_END',
    2016 => 'TRANSFER_VERIFY',
    2017 => 'CALL_MONEY_NOTIFY_PRE',
    2018 => 'CALL_MONEY_NOTIFY',
    2019 => 'CALL_MONEY_SHARE_CONFIRM',
    2020 => 'REDEEM_APPLY_TOKEN',
    2021 => 'TRANSFER_SUCCESS_NOTIFY_ASSIGNOR',
    2022 => 'TRANSFER_SUCCESS_NOTIFY_ASSIGNEE',
    2023 => 'TRANSFER_FAILURE_NOTIFY_ASSIGNEE',
    2024 => 'SM_APPOINTMENT_DATE_NOTIFY',
    2025 => 'SM_OPEN_DATE_NOTIFY',
    2026 => 'SM_APPOINTMENT_CONFIRM',
    2027 => 'SM_PUBLISH_NET_VALUE',
    2028 => 'SM_RANSOM_CONFIRM',
    2029 => 'SM_RANSOM_SETTLED_CONFIRM',
    2030 => 'CALL_MONEY_SUCCESS',
    2031 => 'TRANSFER_SUCCESS_SETTLED',
    2032 => 'SM_DIVIDEND_NOTIFY',
    2033 => 'SM_DIVIDEND_SETTLED',
    2034 => 'TRANSFER_INCOME_SETTLED',
    2035 => 'ORDER_PAIED_INCLUDE_FEE',
    2036 => 'INCOME_AHEAD_SETTLED',
    2037 => 'TRANSFER_INCOME_AHEAD_SETTLED',
    2038 => 'LOAN_APPLY',
    2039 => 'LOAN_APPLY_SUCCESS',
    2040 => 'LOAN_APPLY_FAIL',
    2041 => 'LOAN_PAID',
    2042 => 'LOAN_ALERT_BEFORE_7',
    2043 => 'LOAN_ALERT_BEFORE_3',
    2044 => 'LOAN_ALERT_BEFORE_0',
    2045 => 'LOAN_WARNING_AFTER_1',
    2046 => 'LOAN_WARNING_AFTER_10',
    2047 => 'LOAN_WARNING_AFTER_20',
    2048 => 'LOAN_WARNING_AFTER_30',
    2049 => 'LOAN_WARNING_AFTER_31',
    2050 => 'SM_SHARE_CAL_CONFIRM',
    2051 => 'SM_PF_CONFIRM',
    2052 => 'SM_PUBLISH_NET_VALUE_S',
    2053 => 'SM_RANSOM_SETTLED_CONFIRM_S',
    2054 => 'LOAD_REPAYMENT_NORMAL',
    2055 => 'MOBILE_DONATION_TOKEN',
    2056 => 'DONATION_PAY_SUCCESS',
    2057 => 'LOAD_DELAY_REPAYMENT_NORMAL',
    2058 => 'FUND_PROVE',
    2059 => 'LOAN_WARNING_TPL2_AFTER_1',
    2060 => 'LOAN_WARNING_TPL2_AFTER_10',
    2061 => 'LOAN_WARNING_TPL2_AFTER_15',
    2062 => 'LOAN_WARNING_TPL2_AFTER_16',
    2063 => 'LOAN_REPAYMENT_AHEAD',
    2064 => 'LOAN_ALTER',
    2065 => 'LOAN_ALTER_10',
    2066 => 'LOAN_ALTER_15',
    2067 => 'LOAN_ALTER_16',
    2068 => 'LOAN_HANDLE_ORDER',
    2069 => 'LOAN_SETTLE',
    2078 => 'LOAN_BANK_LIMIT_7',
    2079 => 'LOAN_BANK_LIMIT_3',
    2080 => 'LOAN_BANK_LIMIT_0',
    2083 => 'LOAN_OFFLINE',
    2087 => 'INSURANCE_REDEEM',
    2088 => 'LOAN_ADVANCE_NOREPAY',
    2089 => 'LOAN_ADVANCE_REPAY',
    2090 => 'LOAN_ADVANCE_NORMAL',
    2091 => 'LOAN_ADVANCE_OVERDUE',
    2084 => 'CASH_SETTLED',
    2085 => 'FI_SETTLED_WITH_COUPON',
    2086 => 'FI_SETTLED_NO_COUPON',
    2092 => 'SM_DIVIDEND_NOTIFY_MORT',
    2093 => 'SM_DIVIDEND_SETTLED_MORT',
    2094 => 'SM_PUBLISH_NET_VALUE_MORT',
    2095 => 'INSURE_SETTLED',
    2070 => 'LOAD_REPAYMENT_APPLYING_TOKEN',
    2071 => 'AUTO_REGISTER_SUCC',
    2072 => 'TEMPLATE_AUTO_REGISTER_SUCC',
    2073 => 'EXPERIENCE_INCOME_SETTLED',
    2074 => 'SM_REFUND_NOTIY',
    2075 => 'SM_REFUND_PAYMENT_NOTIY',
    2076 => 'PE_CALL_NOTICE_NOTIY',
    2077 => 'PE_CALL_TERMINAL_NOTICE_NOTIY',
    2081 => 'CASH_REDEEM_APPLY_TOKEN',
    2082 => 'UNBIND_CARD_AUTH',
    3001 => 'FUND_SUBSCRIBE_ENTRUST_FAILED',
    3002 => 'FUND_REDEEM_ENTRUST_FAILED',
    3003 => 'FUND_TRADE_CANCEL',
    3004 => 'FUND_MODIFY_DIVIDENDS_TYPE',
    4001 => 'PZ_APPLY_PAY_SUCCESS',
    5001 => 'CASH_COUPON_EXPERIENCE_SEND',
    5002 => 'CASH_COUPON_FOR_PAY_SINGLE_SEND',
    5003 => 'CASH_COUPON_FOR_PAY_MULT_SEND',
    5004 => 'CASH_COUPON_FOR_FIRST_PAY_SEND',
    7001 => 'DEVICE_PUSH',
    8001 => 'VOICE_TOKEN',
    9001 => 'DIY',
    9002 => 'DIY_SMS',
    9003 => 'DIY_TMP',
  );
}

final class ChannelType {
  const DEFAULT_TYPE = 0;
  const SMS = 1;
  const MAIL = 2;
  static public $__names = array(
    0 => 'DEFAULT_TYPE',
    1 => 'SMS',
    2 => 'MAIL',
  );
}

final class ChannelId {
  const DEFAULT_ID = 0;
  static public $__names = array(
    0 => 'DEFAULT_ID',
  );
}

class SendNotifyRequest {
  static $_TSPEC;

  public $mobile = null;
  public $mail = null;
  public $uid = null;
  public $notifyType = null;
  public $params = null;
  public $svrIp = null;
  public $appId = null;
  public $reqTime = null;
  public $msgType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'mail',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'notifyType',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'params',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        6 => array(
          'var' => 'svrIp',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'appId',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'reqTime',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'msgType',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mobile'])) {
        $this->mobile = $vals['mobile'];
      }
      if (isset($vals['mail'])) {
        $this->mail = $vals['mail'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['notifyType'])) {
        $this->notifyType = $vals['notifyType'];
      }
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['svrIp'])) {
        $this->svrIp = $vals['svrIp'];
      }
      if (isset($vals['appId'])) {
        $this->appId = $vals['appId'];
      }
      if (isset($vals['reqTime'])) {
        $this->reqTime = $vals['reqTime'];
      }
      if (isset($vals['msgType'])) {
        $this->msgType = $vals['msgType'];
      }
    }
  }

  public function getName() {
    return 'SendNotifyRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mobile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->notifyType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::MAP) {
            $this->params = array();
            $_size0 = 0;
            $_ktype1 = 0;
            $_vtype2 = 0;
            $xfer += $input->readMapBegin($_ktype1, $_vtype2, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $key5 = '';
              $val6 = '';
              $xfer += $input->readString($key5);
              $xfer += $input->readString($val6);
              $this->params[$key5] = $val6;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->svrIp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->reqTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->msgType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SendNotifyRequest');
    if ($this->mobile !== null) {
      $xfer += $output->writeFieldBegin('mobile', TType::STRING, 1);
      $xfer += $output->writeString($this->mobile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mail !== null) {
      $xfer += $output->writeFieldBegin('mail', TType::STRING, 2);
      $xfer += $output->writeString($this->mail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 3);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifyType !== null) {
      $xfer += $output->writeFieldBegin('notifyType', TType::I32, 4);
      $xfer += $output->writeI32($this->notifyType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->params !== null) {
      if (!is_array($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::MAP, 5);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->params));
        {
          foreach ($this->params as $kiter7 => $viter8)
          {
            $xfer += $output->writeString($kiter7);
            $xfer += $output->writeString($viter8);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->svrIp !== null) {
      $xfer += $output->writeFieldBegin('svrIp', TType::STRING, 6);
      $xfer += $output->writeString($this->svrIp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appId !== null) {
      $xfer += $output->writeFieldBegin('appId', TType::I32, 7);
      $xfer += $output->writeI32($this->appId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reqTime !== null) {
      $xfer += $output->writeFieldBegin('reqTime', TType::I32, 8);
      $xfer += $output->writeI32($this->reqTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msgType !== null) {
      $xfer += $output->writeFieldBegin('msgType', TType::I32, 9);
      $xfer += $output->writeI32($this->msgType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SendNotifyResponse {
  static $_TSPEC;

  public $msgId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msgId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['msgId'])) {
        $this->msgId = $vals['msgId'];
      }
    }
  }

  public function getName() {
    return 'SendNotifyResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->msgId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SendNotifyResponse');
    if ($this->msgId !== null) {
      $xfer += $output->writeFieldBegin('msgId', TType::I32, 1);
      $xfer += $output->writeI32($this->msgId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SendNotifyResponseContent {
  static $_TSPEC;

  public $smsContent = null;
  public $mailContent = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'smsContent',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'mailContent',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['smsContent'])) {
        $this->smsContent = $vals['smsContent'];
      }
      if (isset($vals['mailContent'])) {
        $this->mailContent = $vals['mailContent'];
      }
    }
  }

  public function getName() {
    return 'SendNotifyResponseContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->smsContent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mailContent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SendNotifyResponseContent');
    if ($this->smsContent !== null) {
      $xfer += $output->writeFieldBegin('smsContent', TType::STRING, 1);
      $xfer += $output->writeString($this->smsContent);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mailContent !== null) {
      $xfer += $output->writeFieldBegin('mailContent', TType::STRING, 2);
      $xfer += $output->writeString($this->mailContent);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}



final class MtServerConstants {
}


