<?php
namespace external\loan;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class LoanRequest {
  static $_TSPEC;

  public $uid = null;
  public $orderId = null;
  public $bankcardId = null;
  public $loanDuration = null;
  public $loanAmt = null;
  public $mortgageAmt = null;
  public $mortgageDeadlineTime = null;
  public $srcId = null;
  public $mortgageProductName = null;
  public $mortgageProductRate = null;
  public $mortgageProductType = null;
  public $PPID = null;
  public $portion = null;
  public $netValue = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'orderId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'bankcardId',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'loanDuration',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'loanAmt',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'mortgageAmt',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'mortgageDeadlineTime',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'srcId',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'mortgageProductName',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'mortgageProductRate',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'mortgageProductType',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'PPID',
          'type' => TType::I64,
          ),
        13 => array(
          'var' => 'portion',
          'type' => TType::I64,
          ),
        14 => array(
          'var' => 'netValue',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['orderId'])) {
        $this->orderId = $vals['orderId'];
      }
      if (isset($vals['bankcardId'])) {
        $this->bankcardId = $vals['bankcardId'];
      }
      if (isset($vals['loanDuration'])) {
        $this->loanDuration = $vals['loanDuration'];
      }
      if (isset($vals['loanAmt'])) {
        $this->loanAmt = $vals['loanAmt'];
      }
      if (isset($vals['mortgageAmt'])) {
        $this->mortgageAmt = $vals['mortgageAmt'];
      }
      if (isset($vals['mortgageDeadlineTime'])) {
        $this->mortgageDeadlineTime = $vals['mortgageDeadlineTime'];
      }
      if (isset($vals['srcId'])) {
        $this->srcId = $vals['srcId'];
      }
      if (isset($vals['mortgageProductName'])) {
        $this->mortgageProductName = $vals['mortgageProductName'];
      }
      if (isset($vals['mortgageProductRate'])) {
        $this->mortgageProductRate = $vals['mortgageProductRate'];
      }
      if (isset($vals['mortgageProductType'])) {
        $this->mortgageProductType = $vals['mortgageProductType'];
      }
      if (isset($vals['PPID'])) {
        $this->PPID = $vals['PPID'];
      }
      if (isset($vals['portion'])) {
        $this->portion = $vals['portion'];
      }
      if (isset($vals['netValue'])) {
        $this->netValue = $vals['netValue'];
      }
    }
  }

  public function getName() {
    return 'LoanRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->bankcardId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->loanDuration);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->loanAmt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->mortgageAmt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mortgageDeadlineTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->srcId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mortgageProductName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->mortgageProductRate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->mortgageProductType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->PPID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->portion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->netValue);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LoanRequest');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I64, 1);
      $xfer += $output->writeI64($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderId !== null) {
      $xfer += $output->writeFieldBegin('orderId', TType::STRING, 2);
      $xfer += $output->writeString($this->orderId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bankcardId !== null) {
      $xfer += $output->writeFieldBegin('bankcardId', TType::I64, 3);
      $xfer += $output->writeI64($this->bankcardId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->loanDuration !== null) {
      $xfer += $output->writeFieldBegin('loanDuration', TType::I64, 4);
      $xfer += $output->writeI64($this->loanDuration);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->loanAmt !== null) {
      $xfer += $output->writeFieldBegin('loanAmt', TType::I64, 5);
      $xfer += $output->writeI64($this->loanAmt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mortgageAmt !== null) {
      $xfer += $output->writeFieldBegin('mortgageAmt', TType::I64, 6);
      $xfer += $output->writeI64($this->mortgageAmt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mortgageDeadlineTime !== null) {
      $xfer += $output->writeFieldBegin('mortgageDeadlineTime', TType::STRING, 7);
      $xfer += $output->writeString($this->mortgageDeadlineTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->srcId !== null) {
      $xfer += $output->writeFieldBegin('srcId', TType::I32, 8);
      $xfer += $output->writeI32($this->srcId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mortgageProductName !== null) {
      $xfer += $output->writeFieldBegin('mortgageProductName', TType::STRING, 9);
      $xfer += $output->writeString($this->mortgageProductName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mortgageProductRate !== null) {
      $xfer += $output->writeFieldBegin('mortgageProductRate', TType::I64, 10);
      $xfer += $output->writeI64($this->mortgageProductRate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mortgageProductType !== null) {
      $xfer += $output->writeFieldBegin('mortgageProductType', TType::I32, 11);
      $xfer += $output->writeI32($this->mortgageProductType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PPID !== null) {
      $xfer += $output->writeFieldBegin('PPID', TType::I64, 12);
      $xfer += $output->writeI64($this->PPID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->portion !== null) {
      $xfer += $output->writeFieldBegin('portion', TType::I64, 13);
      $xfer += $output->writeI64($this->portion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->netValue !== null) {
      $xfer += $output->writeFieldBegin('netValue', TType::I64, 14);
      $xfer += $output->writeI64($this->netValue);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LoanInfo {
  static $_TSPEC;

  public $id = null;
  public $orderId = null;
  public $bankcardId = null;
  public $loanDuration = null;
  public $loanAmt = null;
  public $mortgageAmt = null;
  public $mortgageDeadlineTime = null;
  public $expectRepayTime = null;
  public $repayBjLx = null;
  public $cash = null;
  public $interest = null;
  public $loanStatus = null;
  public $delayDays = null;
  public $fineInterest = null;
  public $lastRepayTime = null;
  public $violateAmt = null;
  public $srcId = null;
  public $actualRepayAmt = null;
  public $actualRepayTime = null;
  public $applyTime = null;
  public $agreementPath = null;
  public $auditName = null;
  public $opinion = null;
  public $passed = null;
  public $auditTime = null;
  public $mortgageProductName = null;
  public $mortgageProductRate = null;
  public $auditState = null;
  public $loanState = null;
  public $drawnDownState = null;
  public $repayState = null;
  public $cashDate = null;
  public $isCanPrepay = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'orderId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'bankcardId',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'loanDuration',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'loanAmt',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'mortgageAmt',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'mortgageDeadlineTime',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'expectRepayTime',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'repayBjLx',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'cash',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'interest',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'loanStatus',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'delayDays',
          'type' => TType::I64,
          ),
        14 => array(
          'var' => 'fineInterest',
          'type' => TType::I64,
          ),
        15 => array(
          'var' => 'lastRepayTime',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'violateAmt',
          'type' => TType::I64,
          ),
        17 => array(
          'var' => 'srcId',
          'type' => TType::I32,
          ),
        18 => array(
          'var' => 'actualRepayAmt',
          'type' => TType::I64,
          ),
        19 => array(
          'var' => 'actualRepayTime',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'applyTime',
          'type' => TType::STRING,
          ),
        21 => array(
          'var' => 'agreementPath',
          'type' => TType::STRING,
          ),
        22 => array(
          'var' => 'auditName',
          'type' => TType::STRING,
          ),
        23 => array(
          'var' => 'opinion',
          'type' => TType::STRING,
          ),
        24 => array(
          'var' => 'passed',
          'type' => TType::STRING,
          ),
        25 => array(
          'var' => 'auditTime',
          'type' => TType::STRING,
          ),
        26 => array(
          'var' => 'mortgageProductName',
          'type' => TType::STRING,
          ),
        27 => array(
          'var' => 'mortgageProductRate',
          'type' => TType::I64,
          ),
        28 => array(
          'var' => 'auditState',
          'type' => TType::STRING,
          ),
        29 => array(
          'var' => 'loanState',
          'type' => TType::STRING,
          ),
        30 => array(
          'var' => 'drawnDownState',
          'type' => TType::STRING,
          ),
        31 => array(
          'var' => 'repayState',
          'type' => TType::STRING,
          ),
        32 => array(
          'var' => 'cashDate',
          'type' => TType::STRING,
          ),
        33 => array(
          'var' => 'isCanPrepay',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['orderId'])) {
        $this->orderId = $vals['orderId'];
      }
      if (isset($vals['bankcardId'])) {
        $this->bankcardId = $vals['bankcardId'];
      }
      if (isset($vals['loanDuration'])) {
        $this->loanDuration = $vals['loanDuration'];
      }
      if (isset($vals['loanAmt'])) {
        $this->loanAmt = $vals['loanAmt'];
      }
      if (isset($vals['mortgageAmt'])) {
        $this->mortgageAmt = $vals['mortgageAmt'];
      }
      if (isset($vals['mortgageDeadlineTime'])) {
        $this->mortgageDeadlineTime = $vals['mortgageDeadlineTime'];
      }
      if (isset($vals['expectRepayTime'])) {
        $this->expectRepayTime = $vals['expectRepayTime'];
      }
      if (isset($vals['repayBjLx'])) {
        $this->repayBjLx = $vals['repayBjLx'];
      }
      if (isset($vals['cash'])) {
        $this->cash = $vals['cash'];
      }
      if (isset($vals['interest'])) {
        $this->interest = $vals['interest'];
      }
      if (isset($vals['loanStatus'])) {
        $this->loanStatus = $vals['loanStatus'];
      }
      if (isset($vals['delayDays'])) {
        $this->delayDays = $vals['delayDays'];
      }
      if (isset($vals['fineInterest'])) {
        $this->fineInterest = $vals['fineInterest'];
      }
      if (isset($vals['lastRepayTime'])) {
        $this->lastRepayTime = $vals['lastRepayTime'];
      }
      if (isset($vals['violateAmt'])) {
        $this->violateAmt = $vals['violateAmt'];
      }
      if (isset($vals['srcId'])) {
        $this->srcId = $vals['srcId'];
      }
      if (isset($vals['actualRepayAmt'])) {
        $this->actualRepayAmt = $vals['actualRepayAmt'];
      }
      if (isset($vals['actualRepayTime'])) {
        $this->actualRepayTime = $vals['actualRepayTime'];
      }
      if (isset($vals['applyTime'])) {
        $this->applyTime = $vals['applyTime'];
      }
      if (isset($vals['agreementPath'])) {
        $this->agreementPath = $vals['agreementPath'];
      }
      if (isset($vals['auditName'])) {
        $this->auditName = $vals['auditName'];
      }
      if (isset($vals['opinion'])) {
        $this->opinion = $vals['opinion'];
      }
      if (isset($vals['passed'])) {
        $this->passed = $vals['passed'];
      }
      if (isset($vals['auditTime'])) {
        $this->auditTime = $vals['auditTime'];
      }
      if (isset($vals['mortgageProductName'])) {
        $this->mortgageProductName = $vals['mortgageProductName'];
      }
      if (isset($vals['mortgageProductRate'])) {
        $this->mortgageProductRate = $vals['mortgageProductRate'];
      }
      if (isset($vals['auditState'])) {
        $this->auditState = $vals['auditState'];
      }
      if (isset($vals['loanState'])) {
        $this->loanState = $vals['loanState'];
      }
      if (isset($vals['drawnDownState'])) {
        $this->drawnDownState = $vals['drawnDownState'];
      }
      if (isset($vals['repayState'])) {
        $this->repayState = $vals['repayState'];
      }
      if (isset($vals['cashDate'])) {
        $this->cashDate = $vals['cashDate'];
      }
      if (isset($vals['isCanPrepay'])) {
        $this->isCanPrepay = $vals['isCanPrepay'];
      }
    }
  }

  public function getName() {
    return 'LoanInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->bankcardId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->loanDuration);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->loanAmt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->mortgageAmt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mortgageDeadlineTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->expectRepayTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->repayBjLx);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->cash);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->interest);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->loanStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->delayDays);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->fineInterest);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lastRepayTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->violateAmt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->srcId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->actualRepayAmt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->actualRepayTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->applyTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->agreementPath);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->auditName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->opinion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->passed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->auditTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mortgageProductName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->mortgageProductRate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 28:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->auditState);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 29:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->loanState);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->drawnDownState);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->repayState);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 32:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cashDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 33:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->isCanPrepay);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LoanInfo');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I64, 1);
      $xfer += $output->writeI64($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderId !== null) {
      $xfer += $output->writeFieldBegin('orderId', TType::STRING, 2);
      $xfer += $output->writeString($this->orderId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bankcardId !== null) {
      $xfer += $output->writeFieldBegin('bankcardId', TType::I64, 3);
      $xfer += $output->writeI64($this->bankcardId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->loanDuration !== null) {
      $xfer += $output->writeFieldBegin('loanDuration', TType::I64, 4);
      $xfer += $output->writeI64($this->loanDuration);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->loanAmt !== null) {
      $xfer += $output->writeFieldBegin('loanAmt', TType::I64, 5);
      $xfer += $output->writeI64($this->loanAmt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mortgageAmt !== null) {
      $xfer += $output->writeFieldBegin('mortgageAmt', TType::I64, 6);
      $xfer += $output->writeI64($this->mortgageAmt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mortgageDeadlineTime !== null) {
      $xfer += $output->writeFieldBegin('mortgageDeadlineTime', TType::STRING, 7);
      $xfer += $output->writeString($this->mortgageDeadlineTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expectRepayTime !== null) {
      $xfer += $output->writeFieldBegin('expectRepayTime', TType::STRING, 8);
      $xfer += $output->writeString($this->expectRepayTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->repayBjLx !== null) {
      $xfer += $output->writeFieldBegin('repayBjLx', TType::I64, 9);
      $xfer += $output->writeI64($this->repayBjLx);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cash !== null) {
      $xfer += $output->writeFieldBegin('cash', TType::I64, 10);
      $xfer += $output->writeI64($this->cash);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->interest !== null) {
      $xfer += $output->writeFieldBegin('interest', TType::I64, 11);
      $xfer += $output->writeI64($this->interest);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->loanStatus !== null) {
      $xfer += $output->writeFieldBegin('loanStatus', TType::STRING, 12);
      $xfer += $output->writeString($this->loanStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->delayDays !== null) {
      $xfer += $output->writeFieldBegin('delayDays', TType::I64, 13);
      $xfer += $output->writeI64($this->delayDays);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fineInterest !== null) {
      $xfer += $output->writeFieldBegin('fineInterest', TType::I64, 14);
      $xfer += $output->writeI64($this->fineInterest);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastRepayTime !== null) {
      $xfer += $output->writeFieldBegin('lastRepayTime', TType::STRING, 15);
      $xfer += $output->writeString($this->lastRepayTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->violateAmt !== null) {
      $xfer += $output->writeFieldBegin('violateAmt', TType::I64, 16);
      $xfer += $output->writeI64($this->violateAmt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->srcId !== null) {
      $xfer += $output->writeFieldBegin('srcId', TType::I32, 17);
      $xfer += $output->writeI32($this->srcId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->actualRepayAmt !== null) {
      $xfer += $output->writeFieldBegin('actualRepayAmt', TType::I64, 18);
      $xfer += $output->writeI64($this->actualRepayAmt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->actualRepayTime !== null) {
      $xfer += $output->writeFieldBegin('actualRepayTime', TType::STRING, 19);
      $xfer += $output->writeString($this->actualRepayTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applyTime !== null) {
      $xfer += $output->writeFieldBegin('applyTime', TType::STRING, 20);
      $xfer += $output->writeString($this->applyTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->agreementPath !== null) {
      $xfer += $output->writeFieldBegin('agreementPath', TType::STRING, 21);
      $xfer += $output->writeString($this->agreementPath);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->auditName !== null) {
      $xfer += $output->writeFieldBegin('auditName', TType::STRING, 22);
      $xfer += $output->writeString($this->auditName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->opinion !== null) {
      $xfer += $output->writeFieldBegin('opinion', TType::STRING, 23);
      $xfer += $output->writeString($this->opinion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->passed !== null) {
      $xfer += $output->writeFieldBegin('passed', TType::STRING, 24);
      $xfer += $output->writeString($this->passed);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->auditTime !== null) {
      $xfer += $output->writeFieldBegin('auditTime', TType::STRING, 25);
      $xfer += $output->writeString($this->auditTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mortgageProductName !== null) {
      $xfer += $output->writeFieldBegin('mortgageProductName', TType::STRING, 26);
      $xfer += $output->writeString($this->mortgageProductName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mortgageProductRate !== null) {
      $xfer += $output->writeFieldBegin('mortgageProductRate', TType::I64, 27);
      $xfer += $output->writeI64($this->mortgageProductRate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->auditState !== null) {
      $xfer += $output->writeFieldBegin('auditState', TType::STRING, 28);
      $xfer += $output->writeString($this->auditState);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->loanState !== null) {
      $xfer += $output->writeFieldBegin('loanState', TType::STRING, 29);
      $xfer += $output->writeString($this->loanState);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->drawnDownState !== null) {
      $xfer += $output->writeFieldBegin('drawnDownState', TType::STRING, 30);
      $xfer += $output->writeString($this->drawnDownState);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->repayState !== null) {
      $xfer += $output->writeFieldBegin('repayState', TType::STRING, 31);
      $xfer += $output->writeString($this->repayState);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cashDate !== null) {
      $xfer += $output->writeFieldBegin('cashDate', TType::STRING, 32);
      $xfer += $output->writeString($this->cashDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isCanPrepay !== null) {
      $xfer += $output->writeFieldBegin('isCanPrepay', TType::STRING, 33);
      $xfer += $output->writeString($this->isCanPrepay);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class countResponse {
  static $_TSPEC;

  public $waitReturnLoanCount = null;
  public $applyingLoanCount = null;
  public $historyLoanCount = null;
  public $exceedLoanCount = null;
  public $totalLoanAmt = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'waitReturnLoanCount',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'applyingLoanCount',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'historyLoanCount',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'exceedLoanCount',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'totalLoanAmt',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['waitReturnLoanCount'])) {
        $this->waitReturnLoanCount = $vals['waitReturnLoanCount'];
      }
      if (isset($vals['applyingLoanCount'])) {
        $this->applyingLoanCount = $vals['applyingLoanCount'];
      }
      if (isset($vals['historyLoanCount'])) {
        $this->historyLoanCount = $vals['historyLoanCount'];
      }
      if (isset($vals['exceedLoanCount'])) {
        $this->exceedLoanCount = $vals['exceedLoanCount'];
      }
      if (isset($vals['totalLoanAmt'])) {
        $this->totalLoanAmt = $vals['totalLoanAmt'];
      }
    }
  }

  public function getName() {
    return 'countResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->waitReturnLoanCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->applyingLoanCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->historyLoanCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->exceedLoanCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->totalLoanAmt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('countResponse');
    if ($this->waitReturnLoanCount !== null) {
      $xfer += $output->writeFieldBegin('waitReturnLoanCount', TType::I32, 1);
      $xfer += $output->writeI32($this->waitReturnLoanCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applyingLoanCount !== null) {
      $xfer += $output->writeFieldBegin('applyingLoanCount', TType::I32, 2);
      $xfer += $output->writeI32($this->applyingLoanCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->historyLoanCount !== null) {
      $xfer += $output->writeFieldBegin('historyLoanCount', TType::I32, 3);
      $xfer += $output->writeI32($this->historyLoanCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->exceedLoanCount !== null) {
      $xfer += $output->writeFieldBegin('exceedLoanCount', TType::I32, 4);
      $xfer += $output->writeI32($this->exceedLoanCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalLoanAmt !== null) {
      $xfer += $output->writeFieldBegin('totalLoanAmt', TType::I64, 5);
      $xfer += $output->writeI64($this->totalLoanAmt);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LoanResponse {
  static $_TSPEC;

  public $totalCount = null;
  public $pageIndex = null;
  public $pageSize = null;
  public $loanInfos = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'totalCount',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'pageIndex',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'loanInfos',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\external\loan\LoanInfo',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['totalCount'])) {
        $this->totalCount = $vals['totalCount'];
      }
      if (isset($vals['pageIndex'])) {
        $this->pageIndex = $vals['pageIndex'];
      }
      if (isset($vals['pageSize'])) {
        $this->pageSize = $vals['pageSize'];
      }
      if (isset($vals['loanInfos'])) {
        $this->loanInfos = $vals['loanInfos'];
      }
    }
  }

  public function getName() {
    return 'LoanResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageIndex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->loanInfos = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \external\loan\LoanInfo();
              $xfer += $elem5->read($input);
              $this->loanInfos []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LoanResponse');
    if ($this->totalCount !== null) {
      $xfer += $output->writeFieldBegin('totalCount', TType::I32, 1);
      $xfer += $output->writeI32($this->totalCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageIndex !== null) {
      $xfer += $output->writeFieldBegin('pageIndex', TType::I32, 2);
      $xfer += $output->writeI32($this->pageIndex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageSize !== null) {
      $xfer += $output->writeFieldBegin('pageSize', TType::I32, 3);
      $xfer += $output->writeI32($this->pageSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->loanInfos !== null) {
      if (!is_array($this->loanInfos)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('loanInfos', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->loanInfos));
        {
          foreach ($this->loanInfos as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LoanQueryResponse {
  static $_TSPEC;

  public $cash = null;
  public $interest = null;
  public $fineInterest = null;
  public $violateAmt = null;
  public $totalCash = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cash',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'interest',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'fineInterest',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'violateAmt',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'totalCash',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['cash'])) {
        $this->cash = $vals['cash'];
      }
      if (isset($vals['interest'])) {
        $this->interest = $vals['interest'];
      }
      if (isset($vals['fineInterest'])) {
        $this->fineInterest = $vals['fineInterest'];
      }
      if (isset($vals['violateAmt'])) {
        $this->violateAmt = $vals['violateAmt'];
      }
      if (isset($vals['totalCash'])) {
        $this->totalCash = $vals['totalCash'];
      }
    }
  }

  public function getName() {
    return 'LoanQueryResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->cash);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->interest);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->fineInterest);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->violateAmt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->totalCash);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LoanQueryResponse');
    if ($this->cash !== null) {
      $xfer += $output->writeFieldBegin('cash', TType::I64, 1);
      $xfer += $output->writeI64($this->cash);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->interest !== null) {
      $xfer += $output->writeFieldBegin('interest', TType::I64, 2);
      $xfer += $output->writeI64($this->interest);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fineInterest !== null) {
      $xfer += $output->writeFieldBegin('fineInterest', TType::I64, 3);
      $xfer += $output->writeI64($this->fineInterest);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->violateAmt !== null) {
      $xfer += $output->writeFieldBegin('violateAmt', TType::I64, 4);
      $xfer += $output->writeI64($this->violateAmt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalCash !== null) {
      $xfer += $output->writeFieldBegin('totalCash', TType::I64, 5);
      $xfer += $output->writeI64($this->totalCash);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PrepaymentResponse {
  static $_TSPEC;

  public $result = null;
  public $state = null;
  public $msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'state',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
    }
  }

  public function getName() {
    return 'PrepaymentResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PrepaymentResponse');
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::STRING, 1);
      $xfer += $output->writeString($this->result);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::STRING, 2);
      $xfer += $output->writeString($this->state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 3);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LoanCheckResponse {
  static $_TSPEC;

  public $result = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
    }
  }

  public function getName() {
    return 'LoanCheckResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LoanCheckResponse');
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::STRING, 1);
      $xfer += $output->writeString($this->result);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


