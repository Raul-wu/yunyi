<?php
namespace external\loan\exception;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class ERetCodeBase {
  const ERR_IN_USER_INFO_SERVER = 279000;
  const ERR_IN_CONFIG_SERVER = 280000;
  const ERR_IN_VERIFICATION_SERVER = 281000;
  const ERR_IN_ZLFUND_SERVER = 282000;
  const ERR_IN_MSG_AUDIT_SERVER = 283000;
  const ERR_IN_SM_SERVER = 284000;
  const ERR_IN_TA_PROC_SERVER = 285000;
  const ERR_IN_TRANSFER_SERVER = 286000;
  const ERR_IN_RECV_PAY_RESULT_SERVER = 287000;
  const ERR_IN_RECV_JINTONG_CALLBACK = 288000;
  const ERR_IN_CARD_AUTH_SERVER = 289000;
  const ERR_IN_ID_GEN_SERVER = 290000;
  const ERR_IN_LOG_SERVER = 291000;
  const ERR_IN_ORDER_SERVER = 292000;
  const ERR_IN_MT_SERVER = 293000;
  const ERR_IN_PAY_SERVER = 294000;
  const ERR_IN_TA_SYNC_SERVER = 295000;
  const ERR_IN_BATCH_PROCESS = 296000;
  const ERR_IN_PAY_CALLBACK_SERVER = 297000;
  const ERR_IN_PAY_REQ_SERVER = 298000;
  const ERR_IN_VACC_SERVER = 299000;
  static public $__names = array(
    279000 => 'ERR_IN_USER_INFO_SERVER',
    280000 => 'ERR_IN_CONFIG_SERVER',
    281000 => 'ERR_IN_VERIFICATION_SERVER',
    282000 => 'ERR_IN_ZLFUND_SERVER',
    283000 => 'ERR_IN_MSG_AUDIT_SERVER',
    284000 => 'ERR_IN_SM_SERVER',
    285000 => 'ERR_IN_TA_PROC_SERVER',
    286000 => 'ERR_IN_TRANSFER_SERVER',
    287000 => 'ERR_IN_RECV_PAY_RESULT_SERVER',
    288000 => 'ERR_IN_RECV_JINTONG_CALLBACK',
    289000 => 'ERR_IN_CARD_AUTH_SERVER',
    290000 => 'ERR_IN_ID_GEN_SERVER',
    291000 => 'ERR_IN_LOG_SERVER',
    292000 => 'ERR_IN_ORDER_SERVER',
    293000 => 'ERR_IN_MT_SERVER',
    294000 => 'ERR_IN_PAY_SERVER',
    295000 => 'ERR_IN_TA_SYNC_SERVER',
    296000 => 'ERR_IN_BATCH_PROCESS',
    297000 => 'ERR_IN_PAY_CALLBACK_SERVER',
    298000 => 'ERR_IN_PAY_REQ_SERVER',
    299000 => 'ERR_IN_VACC_SERVER',
  );
}

class BaseException extends TException {
  static $_TSPEC;

  public $retcode = null;
  public $retmsg = null;
  public $extcode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'retmsg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'extcode',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['retmsg'])) {
        $this->retmsg = $vals['retmsg'];
      }
      if (isset($vals['extcode'])) {
        $this->extcode = $vals['extcode'];
      }
    }
  }

  public function getName() {
    return 'BaseException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->retmsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->extcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BaseException');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->retmsg !== null) {
      $xfer += $output->writeFieldBegin('retmsg', TType::STRING, 2);
      $xfer += $output->writeString($this->retmsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extcode !== null) {
      $xfer += $output->writeFieldBegin('extcode', TType::I32, 3);
      $xfer += $output->writeI32($this->extcode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


