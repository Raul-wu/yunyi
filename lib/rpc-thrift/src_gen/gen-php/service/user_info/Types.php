<?php
namespace service\user_info;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class GetUserRequest {
  static $_TSPEC;

  public $uid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
    }
  }

  public function getName() {
    return 'GetUserRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetUserRequest');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 1);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserInfo {
  static $_TSPEC;

  public $uid = null;
  public $email = null;
  public $corpId = null;
  public $mobile = null;
  public $name = null;
  public $idCardType = null;
  public $idCardNo = null;
  public $sysId = null;
  public $groupId = null;
  public $customerId = null;
  public $regSource = null;
  public $createTime = null;
  public $updateTime = null;
  public $currLoginTime = null;
  public $lastLoginTime = null;
  public $platform = null;
  public $clientId = null;
  public $isPay = null;
  public $regSuccessTime = null;
  public $isNoahMember = null;
  public $emailOrigin = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        3776 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        31616 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        2686 => array(
          'var' => 'corpId',
          'type' => TType::I32,
          ),
        32293 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        1578 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        27431 => array(
          'var' => 'idCardType',
          'type' => TType::STRING,
          ),
        10782 => array(
          'var' => 'idCardNo',
          'type' => TType::STRING,
          ),
        27503 => array(
          'var' => 'sysId',
          'type' => TType::STRING,
          ),
        10092 => array(
          'var' => 'groupId',
          'type' => TType::STRING,
          ),
        29716 => array(
          'var' => 'customerId',
          'type' => TType::STRING,
          ),
        5510 => array(
          'var' => 'regSource',
          'type' => TType::I32,
          ),
        7145 => array(
          'var' => 'createTime',
          'type' => TType::I32,
          ),
        7785 => array(
          'var' => 'updateTime',
          'type' => TType::I32,
          ),
        3649 => array(
          'var' => 'currLoginTime',
          'type' => TType::I32,
          ),
        3561 => array(
          'var' => 'lastLoginTime',
          'type' => TType::I32,
          ),
        22091 => array(
          'var' => 'platform',
          'type' => TType::I32,
          ),
        20783 => array(
          'var' => 'clientId',
          'type' => TType::I32,
          ),
        1109 => array(
          'var' => 'isPay',
          'type' => TType::I32,
          ),
        30451 => array(
          'var' => 'regSuccessTime',
          'type' => TType::I32,
          ),
        16876 => array(
          'var' => 'isNoahMember',
          'type' => TType::BYTE,
          ),
        32448 => array(
          'var' => 'emailOrigin',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['email'])) {
        $this->email = $vals['email'];
      }
      if (isset($vals['corpId'])) {
        $this->corpId = $vals['corpId'];
      }
      if (isset($vals['mobile'])) {
        $this->mobile = $vals['mobile'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['idCardType'])) {
        $this->idCardType = $vals['idCardType'];
      }
      if (isset($vals['idCardNo'])) {
        $this->idCardNo = $vals['idCardNo'];
      }
      if (isset($vals['sysId'])) {
        $this->sysId = $vals['sysId'];
      }
      if (isset($vals['groupId'])) {
        $this->groupId = $vals['groupId'];
      }
      if (isset($vals['customerId'])) {
        $this->customerId = $vals['customerId'];
      }
      if (isset($vals['regSource'])) {
        $this->regSource = $vals['regSource'];
      }
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
      if (isset($vals['updateTime'])) {
        $this->updateTime = $vals['updateTime'];
      }
      if (isset($vals['currLoginTime'])) {
        $this->currLoginTime = $vals['currLoginTime'];
      }
      if (isset($vals['lastLoginTime'])) {
        $this->lastLoginTime = $vals['lastLoginTime'];
      }
      if (isset($vals['platform'])) {
        $this->platform = $vals['platform'];
      }
      if (isset($vals['clientId'])) {
        $this->clientId = $vals['clientId'];
      }
      if (isset($vals['isPay'])) {
        $this->isPay = $vals['isPay'];
      }
      if (isset($vals['regSuccessTime'])) {
        $this->regSuccessTime = $vals['regSuccessTime'];
      }
      if (isset($vals['isNoahMember'])) {
        $this->isNoahMember = $vals['isNoahMember'];
      }
      if (isset($vals['emailOrigin'])) {
        $this->emailOrigin = $vals['emailOrigin'];
      }
    }
  }

  public function getName() {
    return 'UserInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 3776:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31616:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2686:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->corpId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 32293:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mobile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1578:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27431:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idCardType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10782:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idCardNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27503:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sysId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10092:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->groupId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 29716:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->customerId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5510:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->regSource);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7145:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->createTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7785:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->updateTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3649:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->currLoginTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3561:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lastLoginTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22091:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->platform);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20783:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->clientId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1109:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isPay);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30451:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->regSuccessTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16876:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->isNoahMember);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 32448:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->emailOrigin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserInfo');
    if ($this->isPay !== null) {
      $xfer += $output->writeFieldBegin('isPay', TType::I32, 1109);
      $xfer += $output->writeI32($this->isPay);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1578);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->corpId !== null) {
      $xfer += $output->writeFieldBegin('corpId', TType::I32, 2686);
      $xfer += $output->writeI32($this->corpId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastLoginTime !== null) {
      $xfer += $output->writeFieldBegin('lastLoginTime', TType::I32, 3561);
      $xfer += $output->writeI32($this->lastLoginTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currLoginTime !== null) {
      $xfer += $output->writeFieldBegin('currLoginTime', TType::I32, 3649);
      $xfer += $output->writeI32($this->currLoginTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 3776);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->regSource !== null) {
      $xfer += $output->writeFieldBegin('regSource', TType::I32, 5510);
      $xfer += $output->writeI32($this->regSource);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTime !== null) {
      $xfer += $output->writeFieldBegin('createTime', TType::I32, 7145);
      $xfer += $output->writeI32($this->createTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updateTime !== null) {
      $xfer += $output->writeFieldBegin('updateTime', TType::I32, 7785);
      $xfer += $output->writeI32($this->updateTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->groupId !== null) {
      $xfer += $output->writeFieldBegin('groupId', TType::STRING, 10092);
      $xfer += $output->writeString($this->groupId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idCardNo !== null) {
      $xfer += $output->writeFieldBegin('idCardNo', TType::STRING, 10782);
      $xfer += $output->writeString($this->idCardNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isNoahMember !== null) {
      $xfer += $output->writeFieldBegin('isNoahMember', TType::BYTE, 16876);
      $xfer += $output->writeByte($this->isNoahMember);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientId !== null) {
      $xfer += $output->writeFieldBegin('clientId', TType::I32, 20783);
      $xfer += $output->writeI32($this->clientId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->platform !== null) {
      $xfer += $output->writeFieldBegin('platform', TType::I32, 22091);
      $xfer += $output->writeI32($this->platform);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idCardType !== null) {
      $xfer += $output->writeFieldBegin('idCardType', TType::STRING, 27431);
      $xfer += $output->writeString($this->idCardType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sysId !== null) {
      $xfer += $output->writeFieldBegin('sysId', TType::STRING, 27503);
      $xfer += $output->writeString($this->sysId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->customerId !== null) {
      $xfer += $output->writeFieldBegin('customerId', TType::STRING, 29716);
      $xfer += $output->writeString($this->customerId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->regSuccessTime !== null) {
      $xfer += $output->writeFieldBegin('regSuccessTime', TType::I32, 30451);
      $xfer += $output->writeI32($this->regSuccessTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->email !== null) {
      $xfer += $output->writeFieldBegin('email', TType::STRING, 31616);
      $xfer += $output->writeString($this->email);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mobile !== null) {
      $xfer += $output->writeFieldBegin('mobile', TType::STRING, 32293);
      $xfer += $output->writeString($this->mobile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->emailOrigin !== null) {
      $xfer += $output->writeFieldBegin('emailOrigin', TType::STRING, 32448);
      $xfer += $output->writeString($this->emailOrigin);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetBankCardRequest {
  static $_TSPEC;

  public $bankcardId = null;
  public $uid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'bankcardId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['bankcardId'])) {
        $this->bankcardId = $vals['bankcardId'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
    }
  }

  public function getName() {
    return 'GetBankCardRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->bankcardId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetBankCardRequest');
    if ($this->bankcardId !== null) {
      $xfer += $output->writeFieldBegin('bankcardId', TType::I32, 1);
      $xfer += $output->writeI32($this->bankcardId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 2);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BankCardInfo {
  static $_TSPEC;

  public $bankcardId = null;
  public $uid = null;
  public $bankId = null;
  public $bankName = null;
  public $cardNo = null;
  public $provinceId = null;
  public $cityId = null;
  public $isDefault = null;
  public $createTime = null;
  public $updateTime = null;
  public $platform = null;
  public $bindType = null;
  public $clientId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        3096 => array(
          'var' => 'bankcardId',
          'type' => TType::I32,
          ),
        3776 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        8724 => array(
          'var' => 'bankId',
          'type' => TType::STRING,
          ),
        9302 => array(
          'var' => 'bankName',
          'type' => TType::STRING,
          ),
        17952 => array(
          'var' => 'cardNo',
          'type' => TType::STRING,
          ),
        24343 => array(
          'var' => 'provinceId',
          'type' => TType::I32,
          ),
        6784 => array(
          'var' => 'cityId',
          'type' => TType::I32,
          ),
        17807 => array(
          'var' => 'isDefault',
          'type' => TType::BYTE,
          ),
        7145 => array(
          'var' => 'createTime',
          'type' => TType::I32,
          ),
        7785 => array(
          'var' => 'updateTime',
          'type' => TType::I32,
          ),
        22091 => array(
          'var' => 'platform',
          'type' => TType::I32,
          ),
        5698 => array(
          'var' => 'bindType',
          'type' => TType::I32,
          ),
        20783 => array(
          'var' => 'clientId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['bankcardId'])) {
        $this->bankcardId = $vals['bankcardId'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['bankId'])) {
        $this->bankId = $vals['bankId'];
      }
      if (isset($vals['bankName'])) {
        $this->bankName = $vals['bankName'];
      }
      if (isset($vals['cardNo'])) {
        $this->cardNo = $vals['cardNo'];
      }
      if (isset($vals['provinceId'])) {
        $this->provinceId = $vals['provinceId'];
      }
      if (isset($vals['cityId'])) {
        $this->cityId = $vals['cityId'];
      }
      if (isset($vals['isDefault'])) {
        $this->isDefault = $vals['isDefault'];
      }
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
      if (isset($vals['updateTime'])) {
        $this->updateTime = $vals['updateTime'];
      }
      if (isset($vals['platform'])) {
        $this->platform = $vals['platform'];
      }
      if (isset($vals['bindType'])) {
        $this->bindType = $vals['bindType'];
      }
      if (isset($vals['clientId'])) {
        $this->clientId = $vals['clientId'];
      }
    }
  }

  public function getName() {
    return 'BankCardInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 3096:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->bankcardId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3776:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8724:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->bankId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9302:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->bankName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17952:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cardNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24343:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->provinceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6784:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cityId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17807:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->isDefault);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7145:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->createTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7785:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->updateTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22091:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->platform);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5698:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->bindType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20783:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->clientId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BankCardInfo');
    if ($this->bankcardId !== null) {
      $xfer += $output->writeFieldBegin('bankcardId', TType::I32, 3096);
      $xfer += $output->writeI32($this->bankcardId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 3776);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bindType !== null) {
      $xfer += $output->writeFieldBegin('bindType', TType::I32, 5698);
      $xfer += $output->writeI32($this->bindType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cityId !== null) {
      $xfer += $output->writeFieldBegin('cityId', TType::I32, 6784);
      $xfer += $output->writeI32($this->cityId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTime !== null) {
      $xfer += $output->writeFieldBegin('createTime', TType::I32, 7145);
      $xfer += $output->writeI32($this->createTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updateTime !== null) {
      $xfer += $output->writeFieldBegin('updateTime', TType::I32, 7785);
      $xfer += $output->writeI32($this->updateTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bankId !== null) {
      $xfer += $output->writeFieldBegin('bankId', TType::STRING, 8724);
      $xfer += $output->writeString($this->bankId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bankName !== null) {
      $xfer += $output->writeFieldBegin('bankName', TType::STRING, 9302);
      $xfer += $output->writeString($this->bankName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isDefault !== null) {
      $xfer += $output->writeFieldBegin('isDefault', TType::BYTE, 17807);
      $xfer += $output->writeByte($this->isDefault);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardNo !== null) {
      $xfer += $output->writeFieldBegin('cardNo', TType::STRING, 17952);
      $xfer += $output->writeString($this->cardNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientId !== null) {
      $xfer += $output->writeFieldBegin('clientId', TType::I32, 20783);
      $xfer += $output->writeI32($this->clientId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->platform !== null) {
      $xfer += $output->writeFieldBegin('platform', TType::I32, 22091);
      $xfer += $output->writeI32($this->platform);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->provinceId !== null) {
      $xfer += $output->writeFieldBegin('provinceId', TType::I32, 24343);
      $xfer += $output->writeI32($this->provinceId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}



final class UserInfoServerConstants {
}


